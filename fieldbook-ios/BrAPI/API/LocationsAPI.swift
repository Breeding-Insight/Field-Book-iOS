//
// LocationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class LocationsAPI {
    private let brAPIClientAPI: BrAPIClientAPI
    
    init(brAPIClientAPI: BrAPIClientAPI) {
        self.brAPIClientAPI = brAPIClientAPI;
    }
    
    /**
     Get a filtered list of Locations

     - parameter locationType: (query) Filter by location type specified. (optional)
     - parameter locationDbId: (query) Filter by location DbId (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func locationsGet(locationType: String? = nil, locationDbId: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPILocationListResponse?,_ error: Error?) -> Void)) {
        locationsGetWithRequestBuilder(locationType: locationType, locationDbId: locationDbId, externalReferenceID: externalReferenceID, externalReferenceSource: externalReferenceSource, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a filtered list of Locations
     - GET /locations

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "documentationURL" : "https://brapi.org",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "locationName" : "Location 1",
      "environmentType" : "Nursery",
      "siteStatus" : "Private",
      "topography" : "Valley",
      "coordinates" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "locationType" : "Storage Location",
      "abbreviation" : "L1",
      "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
      "slope" : "0",
      "instituteName" : "Plant Science Institute",
      "locationDbId" : "3cfdd67d",
      "exposure" : "Structure, no exposure",
      "countryCode" : "PER",
      "additionalInfo" : { },
      "coordinateDescription" : "North East corner of greenhouse",
      "countryName" : "Peru",
      "coordinateUncertainty" : "20"
    }, {
      "documentationURL" : "https://brapi.org",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "locationName" : "Location 1",
      "environmentType" : "Nursery",
      "siteStatus" : "Private",
      "topography" : "Valley",
      "coordinates" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "locationType" : "Storage Location",
      "abbreviation" : "L1",
      "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
      "slope" : "0",
      "instituteName" : "Plant Science Institute",
      "locationDbId" : "3cfdd67d",
      "exposure" : "Structure, no exposure",
      "countryCode" : "PER",
      "additionalInfo" : { },
      "coordinateDescription" : "North East corner of greenhouse",
      "countryName" : "Peru",
      "coordinateUncertainty" : "20"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter locationType: (query) Filter by location type specified. (optional)
     - parameter locationDbId: (query) Filter by location DbId (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPILocationListResponse>
     */
    open func locationsGetWithRequestBuilder(locationType: String? = nil, locationDbId: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<BrAPILocationListResponse> {
        let path = "/locations"
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "locationType": locationType, 
                        "locationDbId": locationDbId, 
                        "externalReferenceID": externalReferenceID, 
                        "externalReferenceSource": externalReferenceSource, 
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPILocationListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get the details of a specific Location

     - parameter locationDbId: (path) The internal DB id for a location 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func locationsLocationDbIdGet(locationDbId: String, authorization: String? = nil, completion: @escaping ((_ data: BrAPILocationSingleResponse?,_ error: Error?) -> Void)) {
        locationsLocationDbIdGetWithRequestBuilder(locationDbId: locationDbId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the details of a specific Location
     - GET /locations/{locationDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "documentationURL" : "https://brapi.org",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "locationName" : "Location 1",
    "environmentType" : "Nursery",
    "siteStatus" : "Private",
    "topography" : "Valley",
    "coordinates" : {
      "geometry" : {
        "coordinates" : [ -76.506042, 42.417373, 123 ],
        "type" : "Point"
      },
      "type" : "Feature"
    },
    "locationType" : "Storage Location",
    "abbreviation" : "L1",
    "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
    "slope" : "0",
    "instituteName" : "Plant Science Institute",
    "locationDbId" : "3cfdd67d",
    "exposure" : "Structure, no exposure",
    "countryCode" : "PER",
    "additionalInfo" : { },
    "coordinateDescription" : "North East corner of greenhouse",
    "countryName" : "Peru",
    "coordinateUncertainty" : "20"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter locationDbId: (path) The internal DB id for a location 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPILocationSingleResponse> 
     */
    open func locationsLocationDbIdGetWithRequestBuilder(locationDbId: String, authorization: String? = nil) -> RequestBuilder<BrAPILocationSingleResponse> {
        var path = "/locations/{locationDbId}"
        let locationDbIdPreEscape = "\(locationDbId)"
        let locationDbIdPostEscape = locationDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{locationDbId}", with: locationDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPILocationSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update the details for an existing Location

     - parameter locationDbId: (path) The internal DB id for a location 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func locationsLocationDbIdPut(locationDbId: String, body: BrAPILocationNewRequest? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPILocationSingleResponse?,_ error: Error?) -> Void)) {
        locationsLocationDbIdPutWithRequestBuilder(locationDbId: locationDbId, body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update the details for an existing Location
     - PUT /locations/{locationDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "documentationURL" : "https://brapi.org",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "locationName" : "Location 1",
    "environmentType" : "Nursery",
    "siteStatus" : "Private",
    "topography" : "Valley",
    "coordinates" : {
      "geometry" : {
        "coordinates" : [ -76.506042, 42.417373, 123 ],
        "type" : "Point"
      },
      "type" : "Feature"
    },
    "locationType" : "Storage Location",
    "abbreviation" : "L1",
    "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
    "slope" : "0",
    "instituteName" : "Plant Science Institute",
    "locationDbId" : "3cfdd67d",
    "exposure" : "Structure, no exposure",
    "countryCode" : "PER",
    "additionalInfo" : { },
    "coordinateDescription" : "North East corner of greenhouse",
    "countryName" : "Peru",
    "coordinateUncertainty" : "20"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter locationDbId: (path) The internal DB id for a location 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPILocationSingleResponse> 
     */
    open func locationsLocationDbIdPutWithRequestBuilder(locationDbId: String, body: BrAPILocationNewRequest? = nil, authorization: String? = nil) -> RequestBuilder<BrAPILocationSingleResponse> {
        var path = "/locations/{locationDbId}"
        let locationDbIdPreEscape = "\(locationDbId)"
        let locationDbIdPostEscape = locationDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{locationDbId}", with: locationDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPILocationSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Create new Locations

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func locationsPost(body: [BrAPILocationNewRequest]? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPILocationListResponse?,_ error: Error?) -> Void)) {
        locationsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new Locations
     - POST /locations

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "documentationURL" : "https://brapi.org",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "locationName" : "Location 1",
      "environmentType" : "Nursery",
      "siteStatus" : "Private",
      "topography" : "Valley",
      "coordinates" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "locationType" : "Storage Location",
      "abbreviation" : "L1",
      "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
      "slope" : "0",
      "instituteName" : "Plant Science Institute",
      "locationDbId" : "3cfdd67d",
      "exposure" : "Structure, no exposure",
      "countryCode" : "PER",
      "additionalInfo" : { },
      "coordinateDescription" : "North East corner of greenhouse",
      "countryName" : "Peru",
      "coordinateUncertainty" : "20"
    }, {
      "documentationURL" : "https://brapi.org",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "locationName" : "Location 1",
      "environmentType" : "Nursery",
      "siteStatus" : "Private",
      "topography" : "Valley",
      "coordinates" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "locationType" : "Storage Location",
      "abbreviation" : "L1",
      "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
      "slope" : "0",
      "instituteName" : "Plant Science Institute",
      "locationDbId" : "3cfdd67d",
      "exposure" : "Structure, no exposure",
      "countryCode" : "PER",
      "additionalInfo" : { },
      "coordinateDescription" : "North East corner of greenhouse",
      "countryName" : "Peru",
      "coordinateUncertainty" : "20"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPILocationListResponse>
     */
    open func locationsPostWithRequestBuilder(body: [BrAPILocationNewRequest]? = nil, authorization: String? = nil) -> RequestBuilder<BrAPILocationListResponse> {
        let path = "/locations"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPILocationListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Submit a search request for `Locations`

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func searchLocationsPost(body: BrAPILocationSearchRequest? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPILocationListResponse?,_ error: Error?) -> Void)) {
        searchLocationsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Submit a search request for `Locations`
     - POST /search/locations

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "documentationURL" : "https://brapi.org",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "locationName" : "Location 1",
      "environmentType" : "Nursery",
      "siteStatus" : "Private",
      "topography" : "Valley",
      "coordinates" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "locationType" : "Storage Location",
      "abbreviation" : "L1",
      "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
      "slope" : "0",
      "instituteName" : "Plant Science Institute",
      "locationDbId" : "3cfdd67d",
      "exposure" : "Structure, no exposure",
      "countryCode" : "PER",
      "additionalInfo" : { },
      "coordinateDescription" : "North East corner of greenhouse",
      "countryName" : "Peru",
      "coordinateUncertainty" : "20"
    }, {
      "documentationURL" : "https://brapi.org",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "locationName" : "Location 1",
      "environmentType" : "Nursery",
      "siteStatus" : "Private",
      "topography" : "Valley",
      "coordinates" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "locationType" : "Storage Location",
      "abbreviation" : "L1",
      "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
      "slope" : "0",
      "instituteName" : "Plant Science Institute",
      "locationDbId" : "3cfdd67d",
      "exposure" : "Structure, no exposure",
      "countryCode" : "PER",
      "additionalInfo" : { },
      "coordinateDescription" : "North East corner of greenhouse",
      "countryName" : "Peru",
      "coordinateUncertainty" : "20"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPILocationListResponse>
     */
    open func searchLocationsPostWithRequestBuilder(body: BrAPILocationSearchRequest? = nil, authorization: String? = nil) -> RequestBuilder<BrAPILocationListResponse> {
        let path = "/search/locations"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPILocationListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Get the results of a `Locations` search request

     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func searchLocationsSearchResultsDbIdGet(searchResultsDbId: String, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPILocationListResponse?,_ error: Error?) -> Void)) {
        searchLocationsSearchResultsDbIdGetWithRequestBuilder(searchResultsDbId: searchResultsDbId, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the results of a `Locations` search request
     - GET /search/locations/{searchResultsDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "documentationURL" : "https://brapi.org",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "locationName" : "Location 1",
      "environmentType" : "Nursery",
      "siteStatus" : "Private",
      "topography" : "Valley",
      "coordinates" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "locationType" : "Storage Location",
      "abbreviation" : "L1",
      "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
      "slope" : "0",
      "instituteName" : "Plant Science Institute",
      "locationDbId" : "3cfdd67d",
      "exposure" : "Structure, no exposure",
      "countryCode" : "PER",
      "additionalInfo" : { },
      "coordinateDescription" : "North East corner of greenhouse",
      "countryName" : "Peru",
      "coordinateUncertainty" : "20"
    }, {
      "documentationURL" : "https://brapi.org",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "locationName" : "Location 1",
      "environmentType" : "Nursery",
      "siteStatus" : "Private",
      "topography" : "Valley",
      "coordinates" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "locationType" : "Storage Location",
      "abbreviation" : "L1",
      "instituteAddress" : "71 Pilgrim Avenue Chevy Chase MD 20815",
      "slope" : "0",
      "instituteName" : "Plant Science Institute",
      "locationDbId" : "3cfdd67d",
      "exposure" : "Structure, no exposure",
      "countryCode" : "PER",
      "additionalInfo" : { },
      "coordinateDescription" : "North East corner of greenhouse",
      "countryName" : "Peru",
      "coordinateUncertainty" : "20"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPILocationListResponse>
     */
    open func searchLocationsSearchResultsDbIdGetWithRequestBuilder(searchResultsDbId: String, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<BrAPILocationListResponse> {
        var path = "/search/locations/{searchResultsDbId}"
        let searchResultsDbIdPreEscape = "\(searchResultsDbId)"
        let searchResultsDbIdPostEscape = searchResultsDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{searchResultsDbId}", with: searchResultsDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPILocationListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
