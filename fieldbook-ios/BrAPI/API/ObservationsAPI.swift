//
// ObservationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ObservationsAPI {
    private let brAPIClientAPI: BrAPIClientAPI
    
    init(brAPIClientAPI: BrAPIClientAPI) {
        self.brAPIClientAPI = brAPIClientAPI;
    }
    
    /**
     Get a filtered set of Observations

     - parameter observationDbId: (query) The unique ID of an Observation (optional)
     - parameter observationUnitDbId: (query) The unique ID of an Observation Unit (optional)
     - parameter germplasmDbId: (query) The unique ID of a germplasm (accession) to filter on (optional)
     - parameter observationVariableDbId: (query) The unique ID of an observation variable (optional)
     - parameter studyDbId: (query) The unique ID of a studies to filter on (optional)
     - parameter locationDbId: (query) The unique ID of a location where these observations were collected (optional)
     - parameter trialDbId: (query) The unique ID of a trial to filter on (optional)
     - parameter programDbId: (query) The unique ID of a program to filter on (optional)
     - parameter seasonDbId: (query) The year or Phenotyping campaign of a multi-annual study (trees, grape, ...) (optional)
     - parameter observationUnitLevelName: (query) The Observation Unit Level. Returns only the observation unit of the specified Level. References ObservationUnit-&gt;observationUnitPosition-&gt;observationLevel-&gt;levelName (optional)
     - parameter observationUnitLevelOrder: (query) The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. References ObservationUnit-&gt;observationUnitPosition-&gt;observationLevel-&gt;levelOrder (optional)
     - parameter observationUnitLevelCode: (query) The Observation Unit Level Code. This parameter should be used together with &#x60;observationUnitLevelName&#x60; or &#x60;observationUnitLevelOrder&#x60;. References ObservationUnit-&gt;observationUnitPosition-&gt;observationLevel-&gt;levelCode (optional)
     - parameter observationTimeStampRangeStart: (query) Timestamp range start (optional)
     - parameter observationTimeStampRangeEnd: (query) Timestamp range end (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func observationsGet(observationDbId: String? = nil, observationUnitDbId: String? = nil, germplasmDbId: String? = nil, observationVariableDbId: String? = nil, studyDbId: String? = nil, locationDbId: String? = nil, trialDbId: String? = nil, programDbId: String? = nil, seasonDbId: String? = nil, observationUnitLevelName: String? = nil, observationUnitLevelOrder: String? = nil, observationUnitLevelCode: String? = nil, observationTimeStampRangeStart: Date? = nil, observationTimeStampRangeEnd: Date? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIObservationListResponse?,_ error: Error?) -> Void)) {
        observationsGetWithRequestBuilder(observationDbId: observationDbId, observationUnitDbId: observationUnitDbId, germplasmDbId: germplasmDbId, observationVariableDbId: observationVariableDbId, studyDbId: studyDbId, locationDbId: locationDbId, trialDbId: trialDbId, programDbId: programDbId, seasonDbId: seasonDbId, observationUnitLevelName: observationUnitLevelName, observationUnitLevelOrder: observationUnitLevelOrder, observationUnitLevelCode: observationUnitLevelCode, observationTimeStampRangeStart: observationTimeStampRangeStart, observationTimeStampRangeEnd: observationTimeStampRangeEnd, externalReferenceID: externalReferenceID, externalReferenceSource: externalReferenceSource, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a filtered set of Observations
     - GET /observations

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    }, {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter observationDbId: (query) The unique ID of an Observation (optional)
     - parameter observationUnitDbId: (query) The unique ID of an Observation Unit (optional)
     - parameter germplasmDbId: (query) The unique ID of a germplasm (accession) to filter on (optional)
     - parameter observationVariableDbId: (query) The unique ID of an observation variable (optional)
     - parameter studyDbId: (query) The unique ID of a studies to filter on (optional)
     - parameter locationDbId: (query) The unique ID of a location where these observations were collected (optional)
     - parameter trialDbId: (query) The unique ID of a trial to filter on (optional)
     - parameter programDbId: (query) The unique ID of a program to filter on (optional)
     - parameter seasonDbId: (query) The year or Phenotyping campaign of a multi-annual study (trees, grape, ...) (optional)
     - parameter observationUnitLevelName: (query) The Observation Unit Level. Returns only the observation unit of the specified Level. References ObservationUnit-&gt;observationUnitPosition-&gt;observationLevel-&gt;levelName (optional)
     - parameter observationUnitLevelOrder: (query) The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. References ObservationUnit-&gt;observationUnitPosition-&gt;observationLevel-&gt;levelOrder (optional)
     - parameter observationUnitLevelCode: (query) The Observation Unit Level Code. This parameter should be used together with &#x60;observationUnitLevelName&#x60; or &#x60;observationUnitLevelOrder&#x60;. References ObservationUnit-&gt;observationUnitPosition-&gt;observationLevel-&gt;levelCode (optional)
     - parameter observationTimeStampRangeStart: (query) Timestamp range start (optional)
     - parameter observationTimeStampRangeEnd: (query) Timestamp range end (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIObservationListResponse>
     */
    open func observationsGetWithRequestBuilder(observationDbId: String? = nil, observationUnitDbId: String? = nil, germplasmDbId: String? = nil, observationVariableDbId: String? = nil, studyDbId: String? = nil, locationDbId: String? = nil, trialDbId: String? = nil, programDbId: String? = nil, seasonDbId: String? = nil, observationUnitLevelName: String? = nil, observationUnitLevelOrder: String? = nil, observationUnitLevelCode: String? = nil, observationTimeStampRangeStart: Date? = nil, observationTimeStampRangeEnd: Date? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIObservationListResponse> {
        let path = "/observations"
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "observationDbId": observationDbId, 
                        "observationUnitDbId": observationUnitDbId, 
                        "germplasmDbId": germplasmDbId, 
                        "observationVariableDbId": observationVariableDbId, 
                        "studyDbId": studyDbId, 
                        "locationDbId": locationDbId, 
                        "trialDbId": trialDbId, 
                        "programDbId": programDbId, 
                        "seasonDbId": seasonDbId, 
                        "observationUnitLevelName": observationUnitLevelName, 
                        "observationUnitLevelOrder": observationUnitLevelOrder, 
                        "observationUnitLevelCode": observationUnitLevelCode, 
                        "observationTimeStampRangeStart": observationTimeStampRangeStart?.encodeToJSON(), 
                        "observationTimeStampRangeEnd": observationTimeStampRangeEnd?.encodeToJSON(), 
                        "externalReferenceID": externalReferenceID, 
                        "externalReferenceSource": externalReferenceSource, 
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIObservationListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get the details of a specific Observations

     - parameter observationDbId: (path) The unique ID of an observation 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func observationsObservationDbIdGet(observationDbId: String, authorization: String? = nil, completion: @escaping ((_ data: BrAPIObservationSingleResponse?,_ error: Error?) -> Void)) {
        observationsObservationDbIdGetWithRequestBuilder(observationDbId: observationDbId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the details of a specific Observations
     - GET /observations/{observationDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "observationUnitName" : "Plot 1",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "observationVariableName" : "Plant Height in meters",
    "germplasmName" : "A0000003",
    "germplasmDbId" : "2408ab11",
    "collector" : "917d3ae0",
    "observationDbId" : "ef24b615",
    "studyDbId" : "ef2829db",
    "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
    "observationVariableDbId" : "c403d107",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "season" : {
      "year" : 2018,
      "seasonDbId" : "Spring_2018",
      "season" : "Spring"
    },
    "uploadedBy" : "a2f7f60b",
    "value" : "2.3",
    "observationUnitDbId" : "598111d4"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter observationDbId: (path) The unique ID of an observation 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIObservationSingleResponse> 
     */
    open func observationsObservationDbIdGetWithRequestBuilder(observationDbId: String, authorization: String? = nil) -> RequestBuilder<BrAPIObservationSingleResponse> {
        var path = "/observations/{observationDbId}"
        let observationDbIdPreEscape = "\(observationDbId)"
        let observationDbIdPostEscape = observationDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{observationDbId}", with: observationDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIObservationSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update an existing Observation

     - parameter observationDbId: (path) The unique ID of an observation 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func observationsObservationDbIdPut(observationDbId: String, body: BrAPIObservation? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIObservationSingleResponse?,_ error: Error?) -> Void)) {
        observationsObservationDbIdPutWithRequestBuilder(observationDbId: observationDbId, body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an existing Observation
     - PUT /observations/{observationDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "observationUnitName" : "Plot 1",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "observationVariableName" : "Plant Height in meters",
    "germplasmName" : "A0000003",
    "germplasmDbId" : "2408ab11",
    "collector" : "917d3ae0",
    "observationDbId" : "ef24b615",
    "studyDbId" : "ef2829db",
    "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
    "observationVariableDbId" : "c403d107",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "season" : {
      "year" : 2018,
      "seasonDbId" : "Spring_2018",
      "season" : "Spring"
    },
    "uploadedBy" : "a2f7f60b",
    "value" : "2.3",
    "observationUnitDbId" : "598111d4"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter observationDbId: (path) The unique ID of an observation 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIObservationSingleResponse> 
     */
    open func observationsObservationDbIdPutWithRequestBuilder(observationDbId: String, body: BrAPIObservation? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIObservationSingleResponse> {
        var path = "/observations/{observationDbId}"
        let observationDbIdPreEscape = "\(observationDbId)"
        let observationDbIdPostEscape = observationDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{observationDbId}", with: observationDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIObservationSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Add new Observation entities

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func observationsPost(body: [BrAPIObservation]? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIObservationListResponse?,_ error: Error?) -> Void)) {
        observationsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add new Observation entities
     - POST /observations

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    }, {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIObservationListResponse>
     */
    open func observationsPostWithRequestBuilder(body: [BrAPIObservation]? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIObservationListResponse> {
        let path = "/observations"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIObservationListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Update multiple Observation entities

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func observationsPut(body: [String:BrAPIObservation]? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIObservationListResponse?,_ error: Error?) -> Void)) {
        observationsPutWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update multiple Observation entities
     - PUT /observations

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    }, {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIObservationListResponse>
     */
    open func observationsPutWithRequestBuilder(body: [String:BrAPIObservation]? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIObservationListResponse> {
        let path = "/observations"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIObservationListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Get a list of Observations in a table format

     - parameter accept: (header) The requested content type which should be returned by the server 
     - parameter observationUnitDbId: (query) The unique ID of an Observation Unit (optional)
     - parameter germplasmDbId: (query) The unique ID of a germplasm (accession) to filter on (optional)
     - parameter observationVariableDbId: (query) The unique ID of an observation variable (optional)
     - parameter studyDbId: (query) The unique ID of a studies to filter on (optional)
     - parameter locationDbId: (query) The unique ID of a location where these observations were collected (optional)
     - parameter trialDbId: (query) The unique ID of a trial to filter on (optional)
     - parameter programDbId: (query) The unique ID of a program to filter on (optional)
     - parameter seasonDbId: (query) The year or Phenotyping campaign of a multi-annual study (trees, grape, ...) (optional)
     - parameter observationLevel: (query) The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure. (optional)
     - parameter searchResultsDbId: (query) Permanent unique identifier which references the search results (optional)
     - parameter observationTimeStampRangeStart: (query) Timestamp range start (optional)
     - parameter observationTimeStampRangeEnd: (query) Timestamp range end (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func observationsTableGet(accept: WSMIMEDataTypes, observationUnitDbId: String? = nil, germplasmDbId: String? = nil, observationVariableDbId: String? = nil, studyDbId: String? = nil, locationDbId: String? = nil, trialDbId: String? = nil, programDbId: String? = nil, seasonDbId: String? = nil, observationLevel: String? = nil, searchResultsDbId: String? = nil, observationTimeStampRangeStart: Date? = nil, observationTimeStampRangeEnd: Date? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIObservationTableResponse?,_ error: Error?) -> Void)) {
        observationsTableGetWithRequestBuilder(accept: accept, observationUnitDbId: observationUnitDbId, germplasmDbId: germplasmDbId, observationVariableDbId: observationVariableDbId, studyDbId: studyDbId, locationDbId: locationDbId, trialDbId: trialDbId, programDbId: programDbId, seasonDbId: seasonDbId, observationLevel: observationLevel, searchResultsDbId: searchResultsDbId, observationTimeStampRangeStart: observationTimeStampRangeStart, observationTimeStampRangeEnd: observationTimeStampRangeEnd, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a list of Observations in a table format
     - GET /observations/table

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ [ "2019-09-10T18:13:27.223Z", "f3a8a3db", "Plant Alpha", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_111", "Plant_1111", "Pot_1111", "Block_11", "Entry_11", "Rep_11", "25.3", "", "", "" ], [ "2019-09-10T18:14:27.223Z", "f3a8a3db", "Plant Alpha", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_111", "Plant_1111", "Pot_1111", "Block_11", "Entry_11", "Rep_11", "", "3", "", "" ], [ "2019-09-10T18:15:54.868Z", "05d1b011", "Plant Beta", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_112", "Plant_1122", "Pot_1122", "Block_11", "Entry_11", "Rep_12", "27.9", "", "", "" ], [ "2019-09-10T18:16:54.868Z", "05d1b011", "Plant Beta", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_112", "Plant_1122", "Pot_1122", "Block_11", "Entry_11", "Rep_12", "", "1", "", "" ], [ "2019-09-10T18:17:34.433Z", "67e2d87c", "Plant Gamma", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_123", "Plant_1233", "Pot_1233", "Block_12", "Entry_12", "Rep_11", "", "3", "", "" ], [ "2019-09-10T18:18:34.433Z", "67e2d87c", "Plant Gamma", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_123", "Plant_1233", "Pot_1233", "Block_12", "Entry_12", "Rep_11", "25.5", "", "", "" ], [ "2019-09-10T18:19:15.629Z", "d98d0d4c", "Plant Epsilon", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_124", "Plant_1244", "Pot_1244", "Block_12", "Entry_12", "Rep_12", "28.9", "", "", "" ], [ "2019-09-10T18:20:15.629Z", "d98d0d4c", "Plant Epsilon", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_124", "Plant_1244", "Pot_1244", "Block_12", "Entry_12", "Rep_12", "", "0", "", "" ] ],
    "headerRow" : [ "observationTimeStamp", "observationUnitDbId", "observationUnitName", "studyDbId", "studyName", "germplasmDbId", "germplasmName", "positionCoordinateX", "positionCoordinateY", "year", "field", "plot", "sub-plot", "plant", "pot", "block", "entry", "rep" ],
    "observationVariables" : [ {
      "observationVariableDbId" : "367aa1a9",
      "observationVariableName" : "Plant height"
    }, {
      "observationVariableDbId" : "2acb934c",
      "observationVariableName" : "Carotenoid"
    }, {
      "observationVariableDbId" : "85a21ce1",
      "observationVariableName" : "Root color"
    }, {
      "observationVariableDbId" : "46f590e5",
      "observationVariableName" : "Virus severity"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter accept: (header) The requested content type which should be returned by the server 
     - parameter observationUnitDbId: (query) The unique ID of an Observation Unit (optional)
     - parameter germplasmDbId: (query) The unique ID of a germplasm (accession) to filter on (optional)
     - parameter observationVariableDbId: (query) The unique ID of an observation variable (optional)
     - parameter studyDbId: (query) The unique ID of a studies to filter on (optional)
     - parameter locationDbId: (query) The unique ID of a location where these observations were collected (optional)
     - parameter trialDbId: (query) The unique ID of a trial to filter on (optional)
     - parameter programDbId: (query) The unique ID of a program to filter on (optional)
     - parameter seasonDbId: (query) The year or Phenotyping campaign of a multi-annual study (trees, grape, ...) (optional)
     - parameter observationLevel: (query) The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure. (optional)
     - parameter searchResultsDbId: (query) Permanent unique identifier which references the search results (optional)
     - parameter observationTimeStampRangeStart: (query) Timestamp range start (optional)
     - parameter observationTimeStampRangeEnd: (query) Timestamp range end (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIObservationTableResponse>
     */
    open func observationsTableGetWithRequestBuilder(accept: WSMIMEDataTypes, observationUnitDbId: String? = nil, germplasmDbId: String? = nil, observationVariableDbId: String? = nil, studyDbId: String? = nil, locationDbId: String? = nil, trialDbId: String? = nil, programDbId: String? = nil, seasonDbId: String? = nil, observationLevel: String? = nil, searchResultsDbId: String? = nil, observationTimeStampRangeStart: Date? = nil, observationTimeStampRangeEnd: Date? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIObservationTableResponse> {
        let path = "/observations/table"
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "observationUnitDbId": observationUnitDbId, 
                        "germplasmDbId": germplasmDbId, 
                        "observationVariableDbId": observationVariableDbId, 
                        "studyDbId": studyDbId, 
                        "locationDbId": locationDbId, 
                        "trialDbId": trialDbId, 
                        "programDbId": programDbId, 
                        "seasonDbId": seasonDbId, 
                        "observationLevel": observationLevel, 
                        "searchResultsDbId": searchResultsDbId, 
                        "observationTimeStampRangeStart": observationTimeStampRangeStart?.encodeToJSON(), 
                        "observationTimeStampRangeEnd": observationTimeStampRangeEnd?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept": accept,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIObservationTableResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Submit a search request for `Observations`

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func searchObservationsPost(body: BrAPIObservationSearchRequest? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIObservationListResponse?,_ error: Error?) -> Void)) {
        searchObservationsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Submit a search request for `Observations`
     - POST /search/observations

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    }, {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIObservationListResponse>
     */
    open func searchObservationsPostWithRequestBuilder(body: BrAPIObservationSearchRequest? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIObservationListResponse> {
        let path = "/search/observations"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIObservationListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Get the results of a `Observations` search request

     - parameter accept: (header) The requested content type which should be returned by the server 
     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func searchObservationsSearchResultsDbIdGet(accept: WSMIMEDataTypes, searchResultsDbId: String, authorization: String? = nil, page: Int? = nil, pageSize: Int? = nil, completion: @escaping ((_ data: BrAPIObservationListResponse?,_ error: Error?) -> Void)) {
        searchObservationsSearchResultsDbIdGetWithRequestBuilder(accept: accept, searchResultsDbId: searchResultsDbId, authorization: authorization, page: page, pageSize: pageSize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the results of a `Observations` search request
     - GET /search/observations/{searchResultsDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    }, {
      "observationUnitName" : "Plot 1",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "observationVariableName" : "Plant Height in meters",
      "germplasmName" : "A0000003",
      "germplasmDbId" : "2408ab11",
      "collector" : "917d3ae0",
      "observationDbId" : "ef24b615",
      "studyDbId" : "ef2829db",
      "observationTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationVariableDbId" : "c403d107",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "season" : {
        "year" : 2018,
        "seasonDbId" : "Spring_2018",
        "season" : "Spring"
      },
      "uploadedBy" : "a2f7f60b",
      "value" : "2.3",
      "observationUnitDbId" : "598111d4"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter accept: (header) The requested content type which should be returned by the server 
     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)

     - returns: RequestBuilder<BrAPIObservationListResponse>
     */
    open func searchObservationsSearchResultsDbIdGetWithRequestBuilder(accept: WSMIMEDataTypes, searchResultsDbId: String, authorization: String? = nil, page: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<BrAPIObservationListResponse> {
        var path = "/search/observations/{searchResultsDbId}"
        let searchResultsDbIdPreEscape = "\(searchResultsDbId)"
        let searchResultsDbIdPostEscape = searchResultsDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{searchResultsDbId}", with: searchResultsDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Accept": accept,
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIObservationListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
