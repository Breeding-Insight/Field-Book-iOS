//
// ListsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ListsAPI {
    private let brAPIClientAPI: BrAPIClientAPI
    
    init(brAPIClientAPI: BrAPIClientAPI) {
        self.brAPIClientAPI = brAPIClientAPI;
    }
    
    /**
     Get filtered set of generic lists

     - parameter listType: (query) The type of objects contained by this generic list (optional)
     - parameter listName: (query) The human readable name of this generic list (optional)
     - parameter listDbId: (query) The unique ID of this generic list (optional)
     - parameter listSource: (query) The source tag of this generic list (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func listsGet(listType: BrAPIListTypes? = nil, listName: String? = nil, listDbId: String? = nil, listSource: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIListsListResponse?,_ error: Error?) -> Void)) {
        listsGetWithRequestBuilder(listType: listType, listName: listName, listDbId: listDbId, listSource: listSource, externalReferenceID: externalReferenceID, externalReferenceSource: externalReferenceSource, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get filtered set of generic lists
     - GET /lists

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "listOwnerName" : "Bob Robertson",
      "listSource" : "GeneBank Repository 1.3",
      "listOwnerPersonDbId" : "58db0628",
      "additionalInfo" : { },
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "listDbId" : "6f621cfa",
      "listName" : "MyGermplasm_Sept_2020",
      "listSize" : 53,
      "listDescription" : "This is a list of germplasm I would like to investigate next season",
      "listType" : "germplasm"
    }, {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "listOwnerName" : "Bob Robertson",
      "listSource" : "GeneBank Repository 1.3",
      "listOwnerPersonDbId" : "58db0628",
      "additionalInfo" : { },
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "listDbId" : "6f621cfa",
      "listName" : "MyGermplasm_Sept_2020",
      "listSize" : 53,
      "listDescription" : "This is a list of germplasm I would like to investigate next season",
      "listType" : "germplasm"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter listType: (query) The type of objects contained by this generic list (optional)
     - parameter listName: (query) The human readable name of this generic list (optional)
     - parameter listDbId: (query) The unique ID of this generic list (optional)
     - parameter listSource: (query) The source tag of this generic list (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIListsListResponse>
     */
    open func listsGetWithRequestBuilder(listType: BrAPIListTypes? = nil, listName: String? = nil, listDbId: String? = nil, listSource: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIListsListResponse> {
        let path = "/lists"
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "listType": listType, 
                        "listName": listName, 
                        "listDbId": listDbId, 
                        "listSource": listSource, 
                        "externalReferenceID": externalReferenceID, 
                        "externalReferenceSource": externalReferenceSource, 
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIListsListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get the details of a specific List

     - parameter listDbId: (path) The unique ID of this generic list 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func listsListDbIdGet(listDbId: String, authorization: String? = nil, completion: @escaping ((_ data: BrAPIListsSingleResponse?,_ error: Error?) -> Void)) {
        listsListDbIdGetWithRequestBuilder(listDbId: listDbId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the details of a specific List
     - GET /lists/{listDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "listOwnerName" : "Bob Robertson",
    "data" : [ "758a78c0", "2c78f9ee" ],
    "listSource" : "GeneBank Repository 1.3",
    "listOwnerPersonDbId" : "58db0628",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "listSize" : 53,
    "listType" : "germplasm",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : { },
    "listDbId" : "6f621cfa",
    "listName" : "MyGermplasm_Sept_2020",
    "listDescription" : "This is a list of germplasm I would like to investigate next season"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter listDbId: (path) The unique ID of this generic list 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIListsSingleResponse>
     */
    open func listsListDbIdGetWithRequestBuilder(listDbId: String, authorization: String? = nil) -> RequestBuilder<BrAPIListsSingleResponse> {
        var path = "/lists/{listDbId}"
        let listDbIdPreEscape = "\(listDbId)"
        let listDbIdPostEscape = listDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{listDbId}", with: listDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIListsSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Add Items to a specific List

     - parameter listDbId: (path) The unique ID of this generic list 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func listsListDbIdItemsPost(listDbId: String, body: [String]? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIListResponse?,_ error: Error?) -> Void)) {
        listsListDbIdItemsPostWithRequestBuilder(listDbId: listDbId, body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add Items to a specific List
     - POST /lists/{listDbId}/items

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "listOwnerName" : "Bob Robertson",
    "data" : [ "758a78c0", "2c78f9ee" ],
    "listSource" : "GeneBank Repository 1.3",
    "listOwnerPersonDbId" : "58db0628",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "listSize" : 53,
    "listType" : "germplasm",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : { },
    "listDbId" : "6f621cfa",
    "listName" : "MyGermplasm_Sept_2020",
    "listDescription" : "This is a list of germplasm I would like to investigate next season"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter listDbId: (path) The unique ID of this generic list 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIListResponse>
     */
    open func listsListDbIdItemsPostWithRequestBuilder(listDbId: String, body: [String]? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIListResponse> {
        var path = "/lists/{listDbId}/items"
        let listDbIdPreEscape = "\(listDbId)"
        let listDbIdPostEscape = listDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{listDbId}", with: listDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Update an existing generic list

     - parameter listDbId: (path) The unique ID of this generic list 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func listsListDbIdPut(listDbId: String, body: BrAPIListNewRequest? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIListsSingleResponse?,_ error: Error?) -> Void)) {
        listsListDbIdPutWithRequestBuilder(listDbId: listDbId, body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an existing generic list
     - PUT /lists/{listDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "listOwnerName" : "Bob Robertson",
    "data" : [ "758a78c0", "2c78f9ee" ],
    "listSource" : "GeneBank Repository 1.3",
    "listOwnerPersonDbId" : "58db0628",
    "dateModified" : "2000-01-23T04:56:07.000+00:00",
    "listSize" : 53,
    "listType" : "germplasm",
    "dateCreated" : "2000-01-23T04:56:07.000+00:00",
    "additionalInfo" : { },
    "listDbId" : "6f621cfa",
    "listName" : "MyGermplasm_Sept_2020",
    "listDescription" : "This is a list of germplasm I would like to investigate next season"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter listDbId: (path) The unique ID of this generic list 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIListsSingleResponse>
     */
    open func listsListDbIdPutWithRequestBuilder(listDbId: String, body: BrAPIListNewRequest? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIListsSingleResponse> {
        var path = "/lists/{listDbId}"
        let listDbIdPreEscape = "\(listDbId)"
        let listDbIdPostEscape = listDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{listDbId}", with: listDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIListsSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Create New List Objects

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func listsPost(body: [BrAPIListNewRequest]? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIListsListResponse?,_ error: Error?) -> Void)) {
        listsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create New List Objects
     - POST /lists

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "listOwnerName" : "Bob Robertson",
      "listSource" : "GeneBank Repository 1.3",
      "listOwnerPersonDbId" : "58db0628",
      "additionalInfo" : { },
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "listDbId" : "6f621cfa",
      "listName" : "MyGermplasm_Sept_2020",
      "listSize" : 53,
      "listDescription" : "This is a list of germplasm I would like to investigate next season",
      "listType" : "germplasm"
    }, {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "listOwnerName" : "Bob Robertson",
      "listSource" : "GeneBank Repository 1.3",
      "listOwnerPersonDbId" : "58db0628",
      "additionalInfo" : { },
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "listDbId" : "6f621cfa",
      "listName" : "MyGermplasm_Sept_2020",
      "listSize" : 53,
      "listDescription" : "This is a list of germplasm I would like to investigate next season",
      "listType" : "germplasm"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIListsListResponse>
     */
    open func listsPostWithRequestBuilder(body: [BrAPIListNewRequest]? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIListsListResponse> {
        let path = "/lists"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIListsListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Submit a search request for Lists

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func searchListsPost(body: BrAPIListSearchRequest? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIListsListResponse?,_ error: Error?) -> Void)) {
        searchListsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Submit a search request for Lists
     - POST /search/lists

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "listOwnerName" : "Bob Robertson",
      "listSource" : "GeneBank Repository 1.3",
      "listOwnerPersonDbId" : "58db0628",
      "additionalInfo" : { },
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "listDbId" : "6f621cfa",
      "listName" : "MyGermplasm_Sept_2020",
      "listSize" : 53,
      "listDescription" : "This is a list of germplasm I would like to investigate next season",
      "listType" : "germplasm"
    }, {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "listOwnerName" : "Bob Robertson",
      "listSource" : "GeneBank Repository 1.3",
      "listOwnerPersonDbId" : "58db0628",
      "additionalInfo" : { },
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "listDbId" : "6f621cfa",
      "listName" : "MyGermplasm_Sept_2020",
      "listSize" : 53,
      "listDescription" : "This is a list of germplasm I would like to investigate next season",
      "listType" : "germplasm"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIListsListResponse>
     */
    open func searchListsPostWithRequestBuilder(body: BrAPIListSearchRequest? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIListsListResponse> {
        let path = "/search/lists"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIListsListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Get the results of a `List` search request

     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func searchListsSearchResultsDbIdGet(searchResultsDbId: String, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIListsListResponse?,_ error: Error?) -> Void)) {
        searchListsSearchResultsDbIdGetWithRequestBuilder(searchResultsDbId: searchResultsDbId, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the results of a `List` search request
     - GET /search/lists/{searchResultsDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "listOwnerName" : "Bob Robertson",
      "listSource" : "GeneBank Repository 1.3",
      "listOwnerPersonDbId" : "58db0628",
      "additionalInfo" : { },
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "listDbId" : "6f621cfa",
      "listName" : "MyGermplasm_Sept_2020",
      "listSize" : 53,
      "listDescription" : "This is a list of germplasm I would like to investigate next season",
      "listType" : "germplasm"
    }, {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "dateCreated" : "2000-01-23T04:56:07.000+00:00",
      "listOwnerName" : "Bob Robertson",
      "listSource" : "GeneBank Repository 1.3",
      "listOwnerPersonDbId" : "58db0628",
      "additionalInfo" : { },
      "dateModified" : "2000-01-23T04:56:07.000+00:00",
      "listDbId" : "6f621cfa",
      "listName" : "MyGermplasm_Sept_2020",
      "listSize" : 53,
      "listDescription" : "This is a list of germplasm I would like to investigate next season",
      "listType" : "germplasm"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIListsListResponse>
     */
    open func searchListsSearchResultsDbIdGetWithRequestBuilder(searchResultsDbId: String, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIListsListResponse> {
        var path = "/search/lists/{searchResultsDbId}"
        let searchResultsDbIdPreEscape = "\(searchResultsDbId)"
        let searchResultsDbIdPostEscape = searchResultsDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{searchResultsDbId}", with: searchResultsDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIListsListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
