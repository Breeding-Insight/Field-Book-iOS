//
// MethodsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class MethodsAPI {
    private let brAPIClientAPI: BrAPIClientAPI
    
    init(brAPIClientAPI: BrAPIClientAPI) {
        self.brAPIClientAPI = brAPIClientAPI;
    }
    
    /**
     Get the Methods

     - parameter methodDbId: (query) The unique identifier for a method (optional)
     - parameter observationVariableDbId: (query) The unique identifier for an observation variable (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func methodsGet(methodDbId: String? = nil, observationVariableDbId: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIMethodListResponse?,_ error: Error?) -> Void)) {
        methodsGetWithRequestBuilder(methodDbId: methodDbId, observationVariableDbId: observationVariableDbId, externalReferenceID: externalReferenceID, externalReferenceSource: externalReferenceSource, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the Methods
     - GET /methods

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "methodClass" : "Measurement",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "description" : "A measuring tape was used",
      "formula" : "a^2 + b^2 = c^2",
      "methodName" : "Measuring Tape",
      "methodDbId" : "0adb2764",
      "ontologyReference" : {
        "ontologyDbId" : "6b071868",
        "ontologyName" : "The Crop Ontology",
        "documentationLinks" : [ {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        }, {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        } ],
        "version" : "7.2.3"
      },
      "bibliographicalReference" : "Smith, 1893, Really Cool Paper, Popular Journal"
    }, {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "methodClass" : "Measurement",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "description" : "A measuring tape was used",
      "formula" : "a^2 + b^2 = c^2",
      "methodName" : "Measuring Tape",
      "methodDbId" : "0adb2764",
      "ontologyReference" : {
        "ontologyDbId" : "6b071868",
        "ontologyName" : "The Crop Ontology",
        "documentationLinks" : [ {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        }, {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        } ],
        "version" : "7.2.3"
      },
      "bibliographicalReference" : "Smith, 1893, Really Cool Paper, Popular Journal"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter methodDbId: (query) The unique identifier for a method (optional)
     - parameter observationVariableDbId: (query) The unique identifier for an observation variable (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIMethodListResponse>
     */
    open func methodsGetWithRequestBuilder(methodDbId: String? = nil, observationVariableDbId: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIMethodListResponse> {
        let path = "/methods"
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "methodDbId": methodDbId, 
                        "observationVariableDbId": observationVariableDbId, 
                        "externalReferenceID": externalReferenceID, 
                        "externalReferenceSource": externalReferenceSource, 
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIMethodListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get the details for a specific Method

     - parameter methodDbId: (path) Id of the method to retrieve details of. 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func methodsMethodDbIdGet(methodDbId: String, authorization: String? = nil, completion: @escaping ((_ data: BrAPIMethodSingleResponse?,_ error: Error?) -> Void)) {
        methodsMethodDbIdGetWithRequestBuilder(methodDbId: methodDbId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the details for a specific Method
     - GET /methods/{methodDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "methodClass" : "Measurement",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "description" : "A measuring tape was used",
    "formula" : "a^2 + b^2 = c^2",
    "methodName" : "Measuring Tape",
    "methodDbId" : "0adb2764",
    "ontologyReference" : {
      "ontologyDbId" : "6b071868",
      "ontologyName" : "The Crop Ontology",
      "documentationLinks" : [ {
        "type" : "OBO",
        "URL" : "http://purl.obolibrary.org/obo/ro.owl"
      }, {
        "type" : "OBO",
        "URL" : "http://purl.obolibrary.org/obo/ro.owl"
      } ],
      "version" : "7.2.3"
    },
    "bibliographicalReference" : "Smith, 1893, Really Cool Paper, Popular Journal"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter methodDbId: (path) Id of the method to retrieve details of. 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIMethodSingleResponse>
     */
    open func methodsMethodDbIdGetWithRequestBuilder(methodDbId: String, authorization: String? = nil) -> RequestBuilder<BrAPIMethodSingleResponse> {
        var path = "/methods/{methodDbId}"
        let methodDbIdPreEscape = "\(methodDbId)"
        let methodDbIdPostEscape = methodDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{methodDbId}", with: methodDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIMethodSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update an existing Method

     - parameter methodDbId: (path) Id of the method to retrieve details of. 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func methodsMethodDbIdPut(methodDbId: String, body: BrAPIMethodBaseClass? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIMethodSingleResponse?,_ error: Error?) -> Void)) {
        methodsMethodDbIdPutWithRequestBuilder(methodDbId: methodDbId, body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an existing Method
     - PUT /methods/{methodDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "methodClass" : "Measurement",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "description" : "A measuring tape was used",
    "formula" : "a^2 + b^2 = c^2",
    "methodName" : "Measuring Tape",
    "methodDbId" : "0adb2764",
    "ontologyReference" : {
      "ontologyDbId" : "6b071868",
      "ontologyName" : "The Crop Ontology",
      "documentationLinks" : [ {
        "type" : "OBO",
        "URL" : "http://purl.obolibrary.org/obo/ro.owl"
      }, {
        "type" : "OBO",
        "URL" : "http://purl.obolibrary.org/obo/ro.owl"
      } ],
      "version" : "7.2.3"
    },
    "bibliographicalReference" : "Smith, 1893, Really Cool Paper, Popular Journal"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter methodDbId: (path) Id of the method to retrieve details of. 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIMethodSingleResponse>
     */
    open func methodsMethodDbIdPutWithRequestBuilder(methodDbId: String, body: BrAPIMethodBaseClass? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIMethodSingleResponse> {
        var path = "/methods/{methodDbId}"
        let methodDbIdPreEscape = "\(methodDbId)"
        let methodDbIdPostEscape = methodDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{methodDbId}", with: methodDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIMethodSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Add new Methods

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func methodsPost(body: [BrAPIMethodNewRequest]? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIMethodListResponse?,_ error: Error?) -> Void)) {
        methodsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add new Methods
     - POST /methods

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "methodClass" : "Measurement",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "description" : "A measuring tape was used",
      "formula" : "a^2 + b^2 = c^2",
      "methodName" : "Measuring Tape",
      "methodDbId" : "0adb2764",
      "ontologyReference" : {
        "ontologyDbId" : "6b071868",
        "ontologyName" : "The Crop Ontology",
        "documentationLinks" : [ {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        }, {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        } ],
        "version" : "7.2.3"
      },
      "bibliographicalReference" : "Smith, 1893, Really Cool Paper, Popular Journal"
    }, {
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "methodClass" : "Measurement",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "description" : "A measuring tape was used",
      "formula" : "a^2 + b^2 = c^2",
      "methodName" : "Measuring Tape",
      "methodDbId" : "0adb2764",
      "ontologyReference" : {
        "ontologyDbId" : "6b071868",
        "ontologyName" : "The Crop Ontology",
        "documentationLinks" : [ {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        }, {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        } ],
        "version" : "7.2.3"
      },
      "bibliographicalReference" : "Smith, 1893, Really Cool Paper, Popular Journal"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIMethodListResponse>
     */
    open func methodsPostWithRequestBuilder(body: [BrAPIMethodNewRequest]? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIMethodListResponse> {
        let path = "/methods"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIMethodListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
