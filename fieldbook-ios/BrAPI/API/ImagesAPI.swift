//
// ImagesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ImagesAPI {
    private let brAPIClientAPI: BrAPIClientAPI
    
    init(brAPIClientAPI: BrAPIClientAPI) {
        self.brAPIClientAPI = brAPIClientAPI;
    }
    
    /**
     Get the image meta data summaries

     - parameter imageDbId: (query) The unique identifier for a image (optional)
     - parameter imageName: (query) The human readable name of an image (optional)
     - parameter observationUnitDbId: (query) The unique identifier of the observation unit an image is portraying (optional)
     - parameter observationDbId: (query) The unique identifier of the observation an image is associated with (optional)
     - parameter descriptiveOntologyTerm: (query) A descriptive term associated with an image (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func imagesGet(imageDbId: String? = nil, imageName: String? = nil, observationUnitDbId: String? = nil, observationDbId: String? = nil, descriptiveOntologyTerm: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIImageListResponse?,_ error: Error?) -> Void)) {
        imagesGetWithRequestBuilder(imageDbId: imageDbId, imageName: imageName, observationUnitDbId: observationUnitDbId, observationDbId: observationDbId, descriptiveOntologyTerm: descriptiveOntologyTerm, externalReferenceID: externalReferenceID, externalReferenceSource: externalReferenceSource, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the image meta data summaries
     - GET /images

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "imageWidth" : 700,
      "copyright" : "Copyright 2018 Bob Robertson",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "imageName" : "Tomato Image 1",
      "description" : "This is a picture of a tomato",
      "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
      "mimeType" : "image/jpeg",
      "imageHeight" : 550,
      "imageFileSize" : 50000,
      "imageLocation" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
      "imageDbId" : "a55efb9c",
      "imageFileName" : "image_0000231.jpg",
      "imageURL" : "https://wiki.brapi.org/images/tomato",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationUnitDbId" : "b7e690b6"
    }, {
      "imageWidth" : 700,
      "copyright" : "Copyright 2018 Bob Robertson",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "imageName" : "Tomato Image 1",
      "description" : "This is a picture of a tomato",
      "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
      "mimeType" : "image/jpeg",
      "imageHeight" : 550,
      "imageFileSize" : 50000,
      "imageLocation" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
      "imageDbId" : "a55efb9c",
      "imageFileName" : "image_0000231.jpg",
      "imageURL" : "https://wiki.brapi.org/images/tomato",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationUnitDbId" : "b7e690b6"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter imageDbId: (query) The unique identifier for a image (optional)
     - parameter imageName: (query) The human readable name of an image (optional)
     - parameter observationUnitDbId: (query) The unique identifier of the observation unit an image is portraying (optional)
     - parameter observationDbId: (query) The unique identifier of the observation an image is associated with (optional)
     - parameter descriptiveOntologyTerm: (query) A descriptive term associated with an image (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIImageListResponse>
     */
    open func imagesGetWithRequestBuilder(imageDbId: String? = nil, imageName: String? = nil, observationUnitDbId: String? = nil, observationDbId: String? = nil, descriptiveOntologyTerm: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIImageListResponse> {
        let path = "/images"
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "imageDbId": imageDbId, 
                        "imageName": imageName, 
                        "observationUnitDbId": observationUnitDbId, 
                        "observationDbId": observationDbId, 
                        "descriptiveOntologyTerm": descriptiveOntologyTerm, 
                        "externalReferenceID": externalReferenceID, 
                        "externalReferenceSource": externalReferenceSource, 
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIImageListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI:brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Get the an image meta data summary

     - parameter imageDbId: (path) The unique identifier for a image 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func imagesImageDbIdGet(imageDbId: String, authorization: String? = nil, completion: @escaping ((_ data: BrAPIImageSingleResponse?,_ error: Error?) -> Void)) {
        imagesImageDbIdGetWithRequestBuilder(imageDbId: imageDbId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the an image meta data summary
     - GET /images/{imageDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "imageWidth" : 700,
    "copyright" : "Copyright 2018 Bob Robertson",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "imageName" : "Tomato Image 1",
    "description" : "This is a picture of a tomato",
    "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
    "mimeType" : "image/jpeg",
    "imageHeight" : 550,
    "imageFileSize" : 50000,
    "imageLocation" : {
      "geometry" : {
        "coordinates" : [ -76.506042, 42.417373, 123 ],
        "type" : "Point"
      },
      "type" : "Feature"
    },
    "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
    "imageDbId" : "a55efb9c",
    "imageFileName" : "image_0000231.jpg",
    "imageURL" : "https://wiki.brapi.org/images/tomato",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
    "observationUnitDbId" : "b7e690b6"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter imageDbId: (path) The unique identifier for a image 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIImageSingleResponse>
     */
    open func imagesImageDbIdGetWithRequestBuilder(imageDbId: String, authorization: String? = nil) -> RequestBuilder<BrAPIImageSingleResponse> {
        var path = "/images/{imageDbId}"
        let imageDbIdPreEscape = "\(imageDbId)"
        let imageDbIdPostEscape = imageDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageDbId}", with: imageDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIImageSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI:brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update an image with the image file content

     - parameter imageDbId: (path) The unique identifier for a image 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func imagesImageDbIdImagecontentPut(imageDbId: String, body: AnyObject? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIImageSingleResponse?,_ error: Error?) -> Void)) {
        imagesImageDbIdImagecontentPutWithRequestBuilder(imageDbId: imageDbId, body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an image with the image file content
     - PUT /images/{imageDbId}/imagecontent

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "imageWidth" : 700,
    "copyright" : "Copyright 2018 Bob Robertson",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "imageName" : "Tomato Image 1",
    "description" : "This is a picture of a tomato",
    "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
    "mimeType" : "image/jpeg",
    "imageHeight" : 550,
    "imageFileSize" : 50000,
    "imageLocation" : {
      "geometry" : {
        "coordinates" : [ -76.506042, 42.417373, 123 ],
        "type" : "Point"
      },
      "type" : "Feature"
    },
    "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
    "imageDbId" : "a55efb9c",
    "imageFileName" : "image_0000231.jpg",
    "imageURL" : "https://wiki.brapi.org/images/tomato",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
    "observationUnitDbId" : "b7e690b6"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter imageDbId: (path) The unique identifier for a image 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIImageSingleResponse>
     */
    open func imagesImageDbIdImagecontentPutWithRequestBuilder(imageDbId: String, body: AnyObject? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIImageSingleResponse> {
        var path = "/images/{imageDbId}/imagecontent"
        let imageDbIdPreEscape = "\(imageDbId)"
        let imageDbIdPostEscape = imageDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageDbId}", with: imageDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIImageSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI:brAPIClientAPI, method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Update an image meta data

     - parameter imageDbId: (path) The unique identifier for a image 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func imagesImageDbIdPut(imageDbId: String, body: BrAPIImageNewRequest? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIImageSingleResponse?,_ error: Error?) -> Void)) {
        imagesImageDbIdPutWithRequestBuilder(imageDbId: imageDbId, body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an image meta data
     - PUT /images/{imageDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "imageWidth" : 700,
    "copyright" : "Copyright 2018 Bob Robertson",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "imageName" : "Tomato Image 1",
    "description" : "This is a picture of a tomato",
    "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
    "mimeType" : "image/jpeg",
    "imageHeight" : 550,
    "imageFileSize" : 50000,
    "imageLocation" : {
      "geometry" : {
        "coordinates" : [ -76.506042, 42.417373, 123 ],
        "type" : "Point"
      },
      "type" : "Feature"
    },
    "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
    "imageDbId" : "a55efb9c",
    "imageFileName" : "image_0000231.jpg",
    "imageURL" : "https://wiki.brapi.org/images/tomato",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
    "observationUnitDbId" : "b7e690b6"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter imageDbId: (path) The unique identifier for a image 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIImageSingleResponse>
     */
    open func imagesImageDbIdPutWithRequestBuilder(imageDbId: String, body: BrAPIImageNewRequest? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIImageSingleResponse> {
        var path = "/images/{imageDbId}"
        let imageDbIdPreEscape = "\(imageDbId)"
        let imageDbIdPostEscape = imageDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{imageDbId}", with: imageDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIImageSingleResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Create new image meta data objects

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func imagesPost(body: [BrAPIImageNewRequest]? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIImageListResponse?,_ error: Error?) -> Void)) {
        imagesPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new image meta data objects
     - POST /images

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "imageWidth" : 700,
      "copyright" : "Copyright 2018 Bob Robertson",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "imageName" : "Tomato Image 1",
      "description" : "This is a picture of a tomato",
      "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
      "mimeType" : "image/jpeg",
      "imageHeight" : 550,
      "imageFileSize" : 50000,
      "imageLocation" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
      "imageDbId" : "a55efb9c",
      "imageFileName" : "image_0000231.jpg",
      "imageURL" : "https://wiki.brapi.org/images/tomato",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationUnitDbId" : "b7e690b6"
    }, {
      "imageWidth" : 700,
      "copyright" : "Copyright 2018 Bob Robertson",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "imageName" : "Tomato Image 1",
      "description" : "This is a picture of a tomato",
      "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
      "mimeType" : "image/jpeg",
      "imageHeight" : 550,
      "imageFileSize" : 50000,
      "imageLocation" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
      "imageDbId" : "a55efb9c",
      "imageFileName" : "image_0000231.jpg",
      "imageURL" : "https://wiki.brapi.org/images/tomato",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationUnitDbId" : "b7e690b6"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIImageListResponse>
     */
    open func imagesPostWithRequestBuilder(body: [BrAPIImageNewRequest]? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIImageListResponse> {
        let path = "/images"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIImageListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Submit a search request for `XXEntitiesXX`

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func searchImagesPost(body: BrAPIImageSearchRequest? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIImageListResponse?,_ error: Error?) -> Void)) {
        searchImagesPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Submit a search request for `XXEntitiesXX`
     - POST /search/images

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "imageWidth" : 700,
      "copyright" : "Copyright 2018 Bob Robertson",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "imageName" : "Tomato Image 1",
      "description" : "This is a picture of a tomato",
      "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
      "mimeType" : "image/jpeg",
      "imageHeight" : 550,
      "imageFileSize" : 50000,
      "imageLocation" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
      "imageDbId" : "a55efb9c",
      "imageFileName" : "image_0000231.jpg",
      "imageURL" : "https://wiki.brapi.org/images/tomato",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationUnitDbId" : "b7e690b6"
    }, {
      "imageWidth" : 700,
      "copyright" : "Copyright 2018 Bob Robertson",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "imageName" : "Tomato Image 1",
      "description" : "This is a picture of a tomato",
      "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
      "mimeType" : "image/jpeg",
      "imageHeight" : 550,
      "imageFileSize" : 50000,
      "imageLocation" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
      "imageDbId" : "a55efb9c",
      "imageFileName" : "image_0000231.jpg",
      "imageURL" : "https://wiki.brapi.org/images/tomato",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationUnitDbId" : "b7e690b6"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIImageListResponse>
     */
    open func searchImagesPostWithRequestBuilder(body: BrAPIImageSearchRequest? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIImageListResponse> {
        let path = "/search/images"
        let URLString = brAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIImageListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Get the results of a `Images` search request

     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func searchImagesSearchResultsDbIdGet(searchResultsDbId: String, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: BrAPIImageListResponse?,_ error: Error?) -> Void)) {
        searchImagesSearchResultsDbIdGetWithRequestBuilder(searchResultsDbId: searchResultsDbId, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the results of a `Images` search request
     - GET /search/images/{searchResultsDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "imageWidth" : 700,
      "copyright" : "Copyright 2018 Bob Robertson",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "imageName" : "Tomato Image 1",
      "description" : "This is a picture of a tomato",
      "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
      "mimeType" : "image/jpeg",
      "imageHeight" : 550,
      "imageFileSize" : 50000,
      "imageLocation" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
      "imageDbId" : "a55efb9c",
      "imageFileName" : "image_0000231.jpg",
      "imageURL" : "https://wiki.brapi.org/images/tomato",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationUnitDbId" : "b7e690b6"
    }, {
      "imageWidth" : 700,
      "copyright" : "Copyright 2018 Bob Robertson",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "imageName" : "Tomato Image 1",
      "description" : "This is a picture of a tomato",
      "descriptiveOntologyTerms" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
      "mimeType" : "image/jpeg",
      "imageHeight" : 550,
      "imageFileSize" : 50000,
      "imageLocation" : {
        "geometry" : {
          "coordinates" : [ -76.506042, 42.417373, 123 ],
          "type" : "Point"
        },
        "type" : "Feature"
      },
      "observationDbIds" : [ "d05dd235", "8875177d", "c08e81b6" ],
      "imageDbId" : "a55efb9c",
      "imageFileName" : "image_0000231.jpg",
      "imageURL" : "https://wiki.brapi.org/images/tomato",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "imageTimeStamp" : "2000-01-23T04:56:07.000+00:00",
      "observationUnitDbId" : "b7e690b6"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<BrAPIImageListResponse>
     */
    open func searchImagesSearchResultsDbIdGetWithRequestBuilder(searchResultsDbId: String, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<BrAPIImageListResponse> {
        var path = "/search/images/{searchResultsDbId}"
        let searchResultsDbIdPreEscape = "\(searchResultsDbId)"
        let searchResultsDbIdPostEscape = searchResultsDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{searchResultsDbId}", with: searchResultsDbIdPostEscape, options: .literal, range: nil)
        let URLString = brAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrAPIImageListResponse>.Type = BrAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(brAPIClientAPI: brAPIClientAPI, method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
