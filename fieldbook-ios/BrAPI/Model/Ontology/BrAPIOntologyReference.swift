//
// OntologyReference.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** MIAPPE V1.1  (DM-85) Variable accession number - Accession number of the variable in the Crop Ontology  (DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).  (DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).  (DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology). */

public struct BrAPIOntologyReference: Codable {

    /** links to various ontology documentation */
    public var documentationLinks: [BrAPIOntologyReferenceDocumentationLinks]?
    /** Ontology database unique identifier */
    public var ontologyDbId: String
    /** Ontology name */
    public var ontologyName: String
    /** Ontology version (no specific format) */
    public var version: String?
    
    private enum CodingKeys: String, CodingKey {
        case documentationLinks
        case ontologyDbId
        case ontologyName
        case version
    }

    public init(documentationLinks: [BrAPIOntologyReferenceDocumentationLinks]? = nil, ontologyDbId: String, ontologyName: String, version: String? = nil) {
        self.documentationLinks = documentationLinks
        self.ontologyDbId = ontologyDbId
        self.ontologyName = ontologyName
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        do {
            documentationLinks = try container.decode([BrAPIOntologyReferenceDocumentationLinks].self, forKey: .documentationLinks)
        } catch DecodingError.valueNotFound {
            documentationLinks = nil
        }
        do {
            ontologyDbId = try container.decode(String.self, forKey: .ontologyDbId)
        } catch DecodingError.typeMismatch {
            ontologyDbId = try String(container.decode(Int.self, forKey: .ontologyDbId))
        }
        do {
            ontologyName = try container.decode(String.self, forKey: .ontologyName)
        }
        do {
            version = try container.decode(String.self, forKey: .version)
        } catch DecodingError.valueNotFound {
            version = nil
        }
    }
}
