//
// ImageSearchRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct BrAPIImageSearchRequest: Codable {

    /** A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL. */
    public var descriptiveOntologyTerms: [String]?
    /** List of external reference IDs. Could be a simple strings or a URIs. (use with &#x60;externalReferenceSources&#x60; parameter) */
    public var externalReferenceIDs: [String]?
    /** List of identifiers for the source system or database of an external reference (use with &#x60;externalReferenceIDs&#x60; parameter) */
    public var externalReferenceSources: [String]?
    /** A list of image Ids to search for */
    public var imageDbIds: [String]?
    /** Image file names to search for. */
    public var imageFileNames: [String]?
    /** A maximum image file size to search for. */
    public var imageFileSizeMax: Int?
    /** A minimum image file size to search for. */
    public var imageFileSizeMin: Int?
    /** A maximum image height to search for. */
    public var imageHeightMax: Int?
    /** A minimum image height to search for. */
    public var imageHeightMin: Int?
    public var imageLocation: BrAPIGeoJSONSearchArea?
    /** Human readable names to search for. */
    public var imageNames: [String]?
    /** The latest timestamp to search for. */
    public var imageTimeStampRangeEnd: Date?
    /** The earliest timestamp to search for. */
    public var imageTimeStampRangeStart: Date?
    /** A maximum image width to search for. */
    public var imageWidthMax: Int?
    /** A minimum image width to search for. */
    public var imageWidthMin: Int?
    /** A set of image file types to search for. */
    public var mimeTypes: [String]?
    /** A list of observation Ids this image is associated with to search for */
    public var observationDbIds: [String]?
    /** A set of observation unit identifiers to search for. */
    public var observationUnitDbIds: [String]?
    /** Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. */
    public var page: Int?
    /** The size of the pages to be returned. Default is &#x60;1000&#x60;. */
    public var pageSize: Int?

    public init(descriptiveOntologyTerms: [String]? = nil, externalReferenceIDs: [String]? = nil, externalReferenceSources: [String]? = nil, imageDbIds: [String]? = nil, imageFileNames: [String]? = nil, imageFileSizeMax: Int? = nil, imageFileSizeMin: Int? = nil, imageHeightMax: Int? = nil, imageHeightMin: Int? = nil, imageLocation: BrAPIGeoJSONSearchArea? = nil, imageNames: [String]? = nil, imageTimeStampRangeEnd: Date? = nil, imageTimeStampRangeStart: Date? = nil, imageWidthMax: Int? = nil, imageWidthMin: Int? = nil, mimeTypes: [String]? = nil, observationDbIds: [String]? = nil, observationUnitDbIds: [String]? = nil, page: Int? = nil, pageSize: Int? = nil) {
        self.descriptiveOntologyTerms = descriptiveOntologyTerms
        self.externalReferenceIDs = externalReferenceIDs
        self.externalReferenceSources = externalReferenceSources
        self.imageDbIds = imageDbIds
        self.imageFileNames = imageFileNames
        self.imageFileSizeMax = imageFileSizeMax
        self.imageFileSizeMin = imageFileSizeMin
        self.imageHeightMax = imageHeightMax
        self.imageHeightMin = imageHeightMin
        self.imageLocation = imageLocation
        self.imageNames = imageNames
        self.imageTimeStampRangeEnd = imageTimeStampRangeEnd
        self.imageTimeStampRangeStart = imageTimeStampRangeStart
        self.imageWidthMax = imageWidthMax
        self.imageWidthMin = imageWidthMin
        self.mimeTypes = mimeTypes
        self.observationDbIds = observationDbIds
        self.observationUnitDbIds = observationUnitDbIds
        self.page = page
        self.pageSize = pageSize
    }


}
