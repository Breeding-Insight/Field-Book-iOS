//
// ObservationUnitTable.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct ObservationUnitTable: Codable {

    public enum HeaderRow: String, Codable { 
        case observationunitdbid = "observationUnitDbId"
        case observationunitname = "observationUnitName"
        case studydbid = "studyDbId"
        case studyname = "studyName"
        case germplasmdbid = "germplasmDbId"
        case germplasmname = "germplasmName"
        case positioncoordinatex = "positionCoordinateX"
        case positioncoordinatey = "positionCoordinateY"
        case year = "year"
        case field = "field"
        case plot = "plot"
        case subPlot = "sub-plot"
        case plant = "plant"
        case pot = "pot"
        case block = "block"
        case entry = "entry"
        case rep = "rep"
    }
    /** Matrix of observation data recorded for different observation variables across different observation units */
    public var data: [[String]]?
    /** &lt;p&gt;The table is REQUIRED to have the following columns&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;observationUnitDbId - Each row is related to one Observation Unit&lt;/li&gt;   &lt;li&gt;At least one column with an observationVariableDbId&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;observationUnitName&lt;/li&gt;   &lt;li&gt;studyDbId&lt;/li&gt;   &lt;li&gt;studyName&lt;/li&gt;   &lt;li&gt;germplasmDbId&lt;/li&gt;   &lt;li&gt;germplasmName&lt;/li&gt;   &lt;li&gt;positionCoordinateX&lt;/li&gt;   &lt;li&gt;positionCoordinateY&lt;/li&gt;   &lt;li&gt;year&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The table also may have any number of Observation Unit Hierarchy Level columns. For example:&lt;/p&gt; &lt;ul&gt;   &lt;li&gt;field&lt;/li&gt;   &lt;li&gt;plot&lt;/li&gt;   &lt;li&gt;sub-plot&lt;/li&gt;   &lt;li&gt;plant&lt;/li&gt;   &lt;li&gt;pot&lt;/li&gt;   &lt;li&gt;block&lt;/li&gt;   &lt;li&gt;entry&lt;/li&gt;   &lt;li&gt;rep&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The JSON representation provides a pair of extra arrays for defining the headers of the table.  The first array \&quot;headerRow\&quot; will always contain \&quot;observationUnitDbId\&quot; and any or all of the OPTIONAL column header names.  The second array \&quot;observationVariables\&quot; contains the names and DbIds for the Observation Variables represented in the table.  By appending the two arrays, you can construct the complete header row of the table. &lt;/p&gt; */
    public var headerRow: [HeaderRow]?
    /** The list of observation variables which have values recorded for them in the data matrix. Append to the &#x27;headerRow&#x27; for complete header row of the table. */
    public var observationVariables: [ObservationTableObservationVariables]?

    public init(data: [[String]]? = nil, headerRow: [HeaderRow]? = nil, observationVariables: [ObservationTableObservationVariables]? = nil) {
        self.data = data
        self.headerRow = headerRow
        self.observationVariables = observationVariables
    }


}
