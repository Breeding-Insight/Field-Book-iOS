//
// ObservationUnitLevelRelationship2.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** The exact level and level code of an observation unit.   For more information on Observation Levels, please review the &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://wiki.brapi.org/index.php/Observation_Levels\&quot;&gt;Observation Levels documentation&lt;/a&gt;.  MIAPPE V1.1 DM-71 Observation unit type \&quot;Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended.  The observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). Alternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\&quot; */

public struct ObservationUnitLevelRelationship2: Codable {

    public enum LevelName: String, Codable { 
        case study = "study"
        case field = "field"
        case entry = "entry"
        case rep = "rep"
        case block = "block"
        case subBlock = "sub-block"
        case plot = "plot"
        case subPlot = "sub-plot"
        case plant = "plant"
        case pot = "pot"
        case sample = "sample"
    }
    /** An ID code for this level tag. Identify this observation unit by each level of the hierarchy where it exists */
    public var levelCode: String?
    /** A name for this level */
    public var levelName: LevelName?
    /** &#x60;levelOrder&#x60; defines where that level exists in the hierarchy of levels. &#x60;levelOrder&#x60;&#x27;s lower numbers are at the top of the hierarchy (ie field -&gt; 1) and higher numbers are at the bottom of the hierarchy (ie plant -&gt; 9). */
    public var levelOrder: Int?

    public init(levelCode: String? = nil, levelName: LevelName? = nil, levelOrder: Int? = nil) {
        self.levelCode = levelCode
        self.levelName = levelName
        self.levelOrder = levelOrder
    }


}
