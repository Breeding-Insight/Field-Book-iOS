//
// StudySearchRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct StudySearchRequest: Codable {

    public enum SortBy: String, Codable { 
        case studydbid = "studyDbId"
        case trialdbid = "trialDbId"
        case programdbid = "programDbId"
        case locationdbid = "locationDbId"
        case seasondbid = "seasonDbId"
        case studytype = "studyType"
        case studyname = "studyName"
        case studylocation = "studyLocation"
        case programname = "programName"
        case germplasmdbid = "germplasmDbId"
        case observationvariabledbid = "observationVariableDbId"
    }
    public enum SortOrder: String, Codable { 
        case asc = "ASC"
        case desc = "DESC"
    }
    /** Is this study currently active */
    public var active: Bool?
    /** Common name for the crop which this program is for */
    public var commonCropNames: [String]?
    /** List of external reference IDs. Could be a simple strings or a URIs. (use with &#x60;externalReferenceSources&#x60; parameter) */
    public var externalReferenceIDs: [String]?
    /** List of identifiers for the source system or database of an external reference (use with &#x60;externalReferenceIDs&#x60; parameter) */
    public var externalReferenceSources: [String]?
    /** List of IDs which uniquely identify germplasm to search for */
    public var germplasmDbIds: [String]?
    /** List of human readable names to identify germplasm to search for */
    public var germplasmNames: [String]?
    /** The location ids to search for */
    public var locationDbIds: [String]?
    /** A human readable names to search for */
    public var locationNames: [String]?
    /** List of observation variable IDs to search for */
    public var observationVariableDbIds: [String]?
    /** The names of Variables to search for */
    public var observationVariableNames: [String]?
    /** Which result page is requested. The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. */
    public var page: Int?
    /** The size of the pages to be returned. Default is &#x60;1000&#x60;. */
    public var pageSize: Int?
    /** A program identifier to search for */
    public var programDbIds: [String]?
    /** A name of a program to search for */
    public var programNames: [String]?
    /** The ID which uniquely identifies a season */
    public var seasonDbIds: [String]?
    /** Name of one of the fields within the study object on which results can be sorted */
    public var sortBy: SortBy?
    /** Order results should be sorted. ex. \&quot;ASC\&quot; or \&quot;DESC\&quot; */
    public var sortOrder: SortOrder?
    /** A short human readable code for a study */
    public var studyCodes: [String]?
    /** List of study identifiers to search for */
    public var studyDbIds: [String]?
    /** List of study names to filter search results */
    public var studyNames: [String]?
    /** Permanent unique identifier associated with study data. For example, a URI or DOI */
    public var studyPUIs: [String]?
    /** The type of study being performed. ex. \&quot;Yield Trial\&quot;, etc */
    public var studyTypes: [String]?
    /** The ID which uniquely identifies a trial to search for */
    public var trialDbIds: [String]?
    /** The human readable name of a trial to search for */
    public var trialNames: [String]?

    public init(active: Bool? = nil, commonCropNames: [String]? = nil, externalReferenceIDs: [String]? = nil, externalReferenceSources: [String]? = nil, germplasmDbIds: [String]? = nil, germplasmNames: [String]? = nil, locationDbIds: [String]? = nil, locationNames: [String]? = nil, observationVariableDbIds: [String]? = nil, observationVariableNames: [String]? = nil, page: Int? = nil, pageSize: Int? = nil, programDbIds: [String]? = nil, programNames: [String]? = nil, seasonDbIds: [String]? = nil, sortBy: SortBy? = nil, sortOrder: SortOrder? = nil, studyCodes: [String]? = nil, studyDbIds: [String]? = nil, studyNames: [String]? = nil, studyPUIs: [String]? = nil, studyTypes: [String]? = nil, trialDbIds: [String]? = nil, trialNames: [String]? = nil) {
        self.active = active
        self.commonCropNames = commonCropNames
        self.externalReferenceIDs = externalReferenceIDs
        self.externalReferenceSources = externalReferenceSources
        self.germplasmDbIds = germplasmDbIds
        self.germplasmNames = germplasmNames
        self.locationDbIds = locationDbIds
        self.locationNames = locationNames
        self.observationVariableDbIds = observationVariableDbIds
        self.observationVariableNames = observationVariableNames
        self.page = page
        self.pageSize = pageSize
        self.programDbIds = programDbIds
        self.programNames = programNames
        self.seasonDbIds = seasonDbIds
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.studyCodes = studyCodes
        self.studyDbIds = studyDbIds
        self.studyNames = studyNames
        self.studyPUIs = studyPUIs
        self.studyTypes = studyTypes
        self.trialDbIds = trialDbIds
        self.trialNames = trialNames
    }


}
