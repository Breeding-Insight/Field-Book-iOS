//
// ServerInfoAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ServerInfoAPI {
    /**
     Get the list of implemented Calls

     - parameter dataType: (query) The data format supported by the call. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func serverinfoGet(dataType: WSMIMEDataTypes? = nil, authorization: String? = nil, completion: @escaping ((_ data: ServerInfoResponse?,_ error: Error?) -> Void)) {
        serverinfoGetWithRequestBuilder(dataType: dataType, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the list of implemented Calls
     - GET /serverinfo

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "documentationURL" : "institute.org/server",
    "organizationName" : "The Institute",
    "calls" : [ {
      "dataTypes" : [ "application/json" ],
      "versions" : [ "2.0", "2.1" ],
      "methods" : [ "GET", "POST" ],
      "service" : "germplasm/{germplasmDbId}/pedigree"
    }, {
      "dataTypes" : [ "application/json" ],
      "versions" : [ "2.0", "2.1" ],
      "methods" : [ "GET", "POST" ],
      "service" : "germplasm/{germplasmDbId}/pedigree"
    } ],
    "contactEmail" : "contact@institute.org",
    "serverName" : "The BrAPI Test Server",
    "location" : "USA",
    "organizationURL" : "institute.org/home",
    "serverDescription" : "The BrAPI Test Server\nWeb Server - Apache Tomcat 7.0.32\nDatabase - Postgres 10\nSupported BrAPI Version - V2.0"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter dataType: (query) The data format supported by the call. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<ServerInfoResponse> 
     */
    open class func serverinfoGetWithRequestBuilder(dataType: WSMIMEDataTypes? = nil, authorization: String? = nil) -> RequestBuilder<ServerInfoResponse> {
        let path = "/serverinfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "dataType": dataType
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ServerInfoResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
}
