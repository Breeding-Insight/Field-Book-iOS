//
// TrialsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class TrialsAPI {
    /**
     Submit a search request for `Trials`

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchTrialsPost(body: TrialSearchRequest? = nil, authorization: String? = nil, completion: @escaping ((_ data: TrialListResponse?,_ error: Error?) -> Void)) {
        searchTrialsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Submit a search request for `Trials`
     - POST /search/trials

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "commonCropName" : "Wheat",
      "documentationURL" : "https://wiki.brapi.org",
      "trialDbId" : "1883b402",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "endDate" : "2000-01-23",
      "active" : true,
      "programDbId" : "673f378a",
      "trialPUI" : "https://doi.org/101093190",
      "trialName" : "Peru Yield Trial 1",
      "datasetAuthorships" : [ {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      }, {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      } ],
      "programName" : "Tomatillo_Breeding_Program",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
      "contacts" : [ {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      }, {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      } ],
      "startDate" : "2000-01-23",
      "publications" : [ {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      }, {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      } ]
    }, {
      "commonCropName" : "Wheat",
      "documentationURL" : "https://wiki.brapi.org",
      "trialDbId" : "1883b402",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "endDate" : "2000-01-23",
      "active" : true,
      "programDbId" : "673f378a",
      "trialPUI" : "https://doi.org/101093190",
      "trialName" : "Peru Yield Trial 1",
      "datasetAuthorships" : [ {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      }, {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      } ],
      "programName" : "Tomatillo_Breeding_Program",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
      "contacts" : [ {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      }, {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      } ],
      "startDate" : "2000-01-23",
      "publications" : [ {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      }, {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      } ]
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TrialListResponse> 
     */
    open class func searchTrialsPostWithRequestBuilder(body: TrialSearchRequest? = nil, authorization: String? = nil) -> RequestBuilder<TrialListResponse> {
        let path = "/search/trials"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrialListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Get the results of a `Trials` search request

     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchTrialsSearchResultsDbIdGet(searchResultsDbId: String, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: TrialListResponse?,_ error: Error?) -> Void)) {
        searchTrialsSearchResultsDbIdGetWithRequestBuilder(searchResultsDbId: searchResultsDbId, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the results of a `Trials` search request
     - GET /search/trials/{searchResultsDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "commonCropName" : "Wheat",
      "documentationURL" : "https://wiki.brapi.org",
      "trialDbId" : "1883b402",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "endDate" : "2000-01-23",
      "active" : true,
      "programDbId" : "673f378a",
      "trialPUI" : "https://doi.org/101093190",
      "trialName" : "Peru Yield Trial 1",
      "datasetAuthorships" : [ {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      }, {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      } ],
      "programName" : "Tomatillo_Breeding_Program",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
      "contacts" : [ {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      }, {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      } ],
      "startDate" : "2000-01-23",
      "publications" : [ {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      }, {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      } ]
    }, {
      "commonCropName" : "Wheat",
      "documentationURL" : "https://wiki.brapi.org",
      "trialDbId" : "1883b402",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "endDate" : "2000-01-23",
      "active" : true,
      "programDbId" : "673f378a",
      "trialPUI" : "https://doi.org/101093190",
      "trialName" : "Peru Yield Trial 1",
      "datasetAuthorships" : [ {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      }, {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      } ],
      "programName" : "Tomatillo_Breeding_Program",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
      "contacts" : [ {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      }, {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      } ],
      "startDate" : "2000-01-23",
      "publications" : [ {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      }, {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      } ]
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter searchResultsDbId: (path) Unique identifier which references the search results 
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TrialListResponse> 
     */
    open class func searchTrialsSearchResultsDbIdGetWithRequestBuilder(searchResultsDbId: String, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<TrialListResponse> {
        var path = "/search/trials/{searchResultsDbId}"
        let searchResultsDbIdPreEscape = "\(searchResultsDbId)"
        let searchResultsDbIdPostEscape = searchResultsDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{searchResultsDbId}", with: searchResultsDbIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrialListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     * enum for parameter sortBy
     */
    public enum SortBy_trialsGet: String { 
        case trialdbid = "trialDbId"
        case trialname = "trialName"
        case programdbid = "programDbId"
        case programname = "programName"
        case locationdbid = "locationDbId"
        case startdate = "startDate"
        case enddate = "endDate"
    }

    /**
     * enum for parameter sortOrder
     */
    public enum SortOrder_trialsGet: String { 
        case asc = "asc"
        case asc_1 = "ASC"
        case desc = "desc"
        case desc_3 = "DESC"
    }

    /**
     Get a filtered list of Trials

     - parameter active: (query) Filter active status true/false. (optional)
     - parameter commonCropName: (query) Common name for the crop associated with this trial (optional)
     - parameter contactDbId: (query) Contact entities associated with this trial (optional)
     - parameter programDbId: (query) Program filter to only return trials associated with given program id. (optional)
     - parameter locationDbId: (query) Filter by location (optional)
     - parameter searchDateRangeStart: (query) The start of the overlapping search date range. &#x60;searchDateRangeStart&#x60; must be before &#x60;searchDateRangeEnd&#x60;.  Return a Trial entity if any of the following cases are true  - &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; AND &#x60;searchDateRangeEnd&#x60; is null   - &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; AND &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60;  - &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60; AND &#x60;searchDateRangeStart&#x60; is null  - &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60; AND &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; (optional)
     - parameter searchDateRangeEnd: (query) The start of the overlapping search date range. &#x60;searchDateRangeStart&#x60; must be before &#x60;searchDateRangeEnd&#x60;.  Return a Trial entity if any of the following cases are true  - &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; AND &#x60;searchDateRangeEnd&#x60; is null   - &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; AND &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60;  - &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60; AND &#x60;searchDateRangeStart&#x60; is null  - &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60; AND &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; (optional)
     - parameter studyDbId: (query) Filter by connected studyDbId (optional)
     - parameter trialDbId: (query) Filter by trialDbId (optional)
     - parameter trialName: (query) Filter by trial name (optional)
     - parameter trialPUI: (query) Filter by trial PUI (optional)
     - parameter sortBy: (query) Sort order. Name of the field to sort by. (optional)
     - parameter sortOrder: (query) Sort order direction: asc/desc (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trialsGet(active: Bool? = nil, commonCropName: String? = nil, contactDbId: String? = nil, programDbId: String? = nil, locationDbId: String? = nil, searchDateRangeStart: Date? = nil, searchDateRangeEnd: Date? = nil, studyDbId: String? = nil, trialDbId: String? = nil, trialName: String? = nil, trialPUI: String? = nil, sortBy: SortBy_trialsGet? = nil, sortOrder: SortOrder_trialsGet? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: TrialListResponse?,_ error: Error?) -> Void)) {
        trialsGetWithRequestBuilder(active: active, commonCropName: commonCropName, contactDbId: contactDbId, programDbId: programDbId, locationDbId: locationDbId, searchDateRangeStart: searchDateRangeStart, searchDateRangeEnd: searchDateRangeEnd, studyDbId: studyDbId, trialDbId: trialDbId, trialName: trialName, trialPUI: trialPUI, sortBy: sortBy, sortOrder: sortOrder, externalReferenceID: externalReferenceID, externalReferenceSource: externalReferenceSource, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a filtered list of Trials
     - GET /trials

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "commonCropName" : "Wheat",
      "documentationURL" : "https://wiki.brapi.org",
      "trialDbId" : "1883b402",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "endDate" : "2000-01-23",
      "active" : true,
      "programDbId" : "673f378a",
      "trialPUI" : "https://doi.org/101093190",
      "trialName" : "Peru Yield Trial 1",
      "datasetAuthorships" : [ {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      }, {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      } ],
      "programName" : "Tomatillo_Breeding_Program",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
      "contacts" : [ {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      }, {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      } ],
      "startDate" : "2000-01-23",
      "publications" : [ {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      }, {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      } ]
    }, {
      "commonCropName" : "Wheat",
      "documentationURL" : "https://wiki.brapi.org",
      "trialDbId" : "1883b402",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "endDate" : "2000-01-23",
      "active" : true,
      "programDbId" : "673f378a",
      "trialPUI" : "https://doi.org/101093190",
      "trialName" : "Peru Yield Trial 1",
      "datasetAuthorships" : [ {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      }, {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      } ],
      "programName" : "Tomatillo_Breeding_Program",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
      "contacts" : [ {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      }, {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      } ],
      "startDate" : "2000-01-23",
      "publications" : [ {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      }, {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      } ]
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter active: (query) Filter active status true/false. (optional)
     - parameter commonCropName: (query) Common name for the crop associated with this trial (optional)
     - parameter contactDbId: (query) Contact entities associated with this trial (optional)
     - parameter programDbId: (query) Program filter to only return trials associated with given program id. (optional)
     - parameter locationDbId: (query) Filter by location (optional)
     - parameter searchDateRangeStart: (query) The start of the overlapping search date range. &#x60;searchDateRangeStart&#x60; must be before &#x60;searchDateRangeEnd&#x60;.  Return a Trial entity if any of the following cases are true  - &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; AND &#x60;searchDateRangeEnd&#x60; is null   - &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; AND &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60;  - &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60; AND &#x60;searchDateRangeStart&#x60; is null  - &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60; AND &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; (optional)
     - parameter searchDateRangeEnd: (query) The start of the overlapping search date range. &#x60;searchDateRangeStart&#x60; must be before &#x60;searchDateRangeEnd&#x60;.  Return a Trial entity if any of the following cases are true  - &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; AND &#x60;searchDateRangeEnd&#x60; is null   - &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; AND &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60;  - &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60; AND &#x60;searchDateRangeStart&#x60; is null  - &#x60;searchDateRangeEnd&#x60; is after &#x60;trial.startDate&#x60; AND &#x60;searchDateRangeStart&#x60; is before &#x60;trial.endDate&#x60; (optional)
     - parameter studyDbId: (query) Filter by connected studyDbId (optional)
     - parameter trialDbId: (query) Filter by trialDbId (optional)
     - parameter trialName: (query) Filter by trial name (optional)
     - parameter trialPUI: (query) Filter by trial PUI (optional)
     - parameter sortBy: (query) Sort order. Name of the field to sort by. (optional)
     - parameter sortOrder: (query) Sort order direction: asc/desc (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TrialListResponse> 
     */
    open class func trialsGetWithRequestBuilder(active: Bool? = nil, commonCropName: String? = nil, contactDbId: String? = nil, programDbId: String? = nil, locationDbId: String? = nil, searchDateRangeStart: Date? = nil, searchDateRangeEnd: Date? = nil, studyDbId: String? = nil, trialDbId: String? = nil, trialName: String? = nil, trialPUI: String? = nil, sortBy: SortBy_trialsGet? = nil, sortOrder: SortOrder_trialsGet? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<TrialListResponse> {
        let path = "/trials"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "active": active, 
                        "commonCropName": commonCropName, 
                        "contactDbId": contactDbId, 
                        "programDbId": programDbId, 
                        "locationDbId": locationDbId, 
                        "searchDateRangeStart": searchDateRangeStart?.encodeToJSON(), 
                        "searchDateRangeEnd": searchDateRangeEnd?.encodeToJSON(), 
                        "studyDbId": studyDbId, 
                        "trialDbId": trialDbId, 
                        "trialName": trialName, 
                        "trialPUI": trialPUI, 
                        "sortBy": sortBy?.rawValue, 
                        "sortOrder": sortOrder?.rawValue, 
                        "externalReferenceID": externalReferenceID, 
                        "externalReferenceSource": externalReferenceSource, 
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrialListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Create new trials

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trialsPost(body: [TrialNewRequest]? = nil, authorization: String? = nil, completion: @escaping ((_ data: TrialListResponse?,_ error: Error?) -> Void)) {
        trialsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new trials
     - POST /trials

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "commonCropName" : "Wheat",
      "documentationURL" : "https://wiki.brapi.org",
      "trialDbId" : "1883b402",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "endDate" : "2000-01-23",
      "active" : true,
      "programDbId" : "673f378a",
      "trialPUI" : "https://doi.org/101093190",
      "trialName" : "Peru Yield Trial 1",
      "datasetAuthorships" : [ {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      }, {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      } ],
      "programName" : "Tomatillo_Breeding_Program",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
      "contacts" : [ {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      }, {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      } ],
      "startDate" : "2000-01-23",
      "publications" : [ {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      }, {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      } ]
    }, {
      "commonCropName" : "Wheat",
      "documentationURL" : "https://wiki.brapi.org",
      "trialDbId" : "1883b402",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "endDate" : "2000-01-23",
      "active" : true,
      "programDbId" : "673f378a",
      "trialPUI" : "https://doi.org/101093190",
      "trialName" : "Peru Yield Trial 1",
      "datasetAuthorships" : [ {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      }, {
        "license" : "https://CreativeCommons.org/licenses/by/4.0",
        "datasetPUI" : "doi:10.15454/312953986E3",
        "publicReleaseDate" : "2000-01-23",
        "submissionDate" : "2000-01-23"
      } ],
      "programName" : "Tomatillo_Breeding_Program",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
      "contacts" : [ {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      }, {
        "contactDbId" : "5f4e5509",
        "name" : "Bob Robertson",
        "orcid" : "http://orcid.org/0000-0001-8640-1750",
        "type" : "PI",
        "email" : "bob@bob.com",
        "instituteName" : "The BrAPI Institute"
      } ],
      "startDate" : "2000-01-23",
      "publications" : [ {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      }, {
        "publicationPUI" : "doi:10.15454/312953986E3",
        "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
      } ]
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TrialListResponse> 
     */
    open class func trialsPostWithRequestBuilder(body: [TrialNewRequest]? = nil, authorization: String? = nil) -> RequestBuilder<TrialListResponse> {
        let path = "/trials"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrialListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Get the details of a specific Trial

     - parameter trialDbId: (path) The internal trialDbId 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trialsTrialDbIdGet(trialDbId: String, authorization: String? = nil, completion: @escaping ((_ data: TrialSingleResponse?,_ error: Error?) -> Void)) {
        trialsTrialDbIdGetWithRequestBuilder(trialDbId: trialDbId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the details of a specific Trial
     - GET /trials/{trialDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "commonCropName" : "Wheat",
    "documentationURL" : "https://wiki.brapi.org",
    "trialDbId" : "1883b402",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "endDate" : "2000-01-23",
    "active" : true,
    "programDbId" : "673f378a",
    "trialPUI" : "https://doi.org/101093190",
    "trialName" : "Peru Yield Trial 1",
    "datasetAuthorships" : [ {
      "license" : "https://CreativeCommons.org/licenses/by/4.0",
      "datasetPUI" : "doi:10.15454/312953986E3",
      "publicReleaseDate" : "2000-01-23",
      "submissionDate" : "2000-01-23"
    }, {
      "license" : "https://CreativeCommons.org/licenses/by/4.0",
      "datasetPUI" : "doi:10.15454/312953986E3",
      "publicReleaseDate" : "2000-01-23",
      "submissionDate" : "2000-01-23"
    } ],
    "programName" : "Tomatillo_Breeding_Program",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
    "contacts" : [ {
      "contactDbId" : "5f4e5509",
      "name" : "Bob Robertson",
      "orcid" : "http://orcid.org/0000-0001-8640-1750",
      "type" : "PI",
      "email" : "bob@bob.com",
      "instituteName" : "The BrAPI Institute"
    }, {
      "contactDbId" : "5f4e5509",
      "name" : "Bob Robertson",
      "orcid" : "http://orcid.org/0000-0001-8640-1750",
      "type" : "PI",
      "email" : "bob@bob.com",
      "instituteName" : "The BrAPI Institute"
    } ],
    "startDate" : "2000-01-23",
    "publications" : [ {
      "publicationPUI" : "doi:10.15454/312953986E3",
      "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
    }, {
      "publicationPUI" : "doi:10.15454/312953986E3",
      "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter trialDbId: (path) The internal trialDbId 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TrialSingleResponse> 
     */
    open class func trialsTrialDbIdGetWithRequestBuilder(trialDbId: String, authorization: String? = nil) -> RequestBuilder<TrialSingleResponse> {
        var path = "/trials/{trialDbId}"
        let trialDbIdPreEscape = "\(trialDbId)"
        let trialDbIdPostEscape = trialDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trialDbId}", with: trialDbIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrialSingleResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update the details of an existing Trial

     - parameter trialDbId: (path) The internal trialDbId 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trialsTrialDbIdPut(trialDbId: String, body: TrialNewRequest? = nil, authorization: String? = nil, completion: @escaping ((_ data: TrialSingleResponse?,_ error: Error?) -> Void)) {
        trialsTrialDbIdPutWithRequestBuilder(trialDbId: trialDbId, body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update the details of an existing Trial
     - PUT /trials/{trialDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "commonCropName" : "Wheat",
    "documentationURL" : "https://wiki.brapi.org",
    "trialDbId" : "1883b402",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "endDate" : "2000-01-23",
    "active" : true,
    "programDbId" : "673f378a",
    "trialPUI" : "https://doi.org/101093190",
    "trialName" : "Peru Yield Trial 1",
    "datasetAuthorships" : [ {
      "license" : "https://CreativeCommons.org/licenses/by/4.0",
      "datasetPUI" : "doi:10.15454/312953986E3",
      "publicReleaseDate" : "2000-01-23",
      "submissionDate" : "2000-01-23"
    }, {
      "license" : "https://CreativeCommons.org/licenses/by/4.0",
      "datasetPUI" : "doi:10.15454/312953986E3",
      "publicReleaseDate" : "2000-01-23",
      "submissionDate" : "2000-01-23"
    } ],
    "programName" : "Tomatillo_Breeding_Program",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "trialDescription" : "General drought resistance trial initiated in Peru before duplication in Africa",
    "contacts" : [ {
      "contactDbId" : "5f4e5509",
      "name" : "Bob Robertson",
      "orcid" : "http://orcid.org/0000-0001-8640-1750",
      "type" : "PI",
      "email" : "bob@bob.com",
      "instituteName" : "The BrAPI Institute"
    }, {
      "contactDbId" : "5f4e5509",
      "name" : "Bob Robertson",
      "orcid" : "http://orcid.org/0000-0001-8640-1750",
      "type" : "PI",
      "email" : "bob@bob.com",
      "instituteName" : "The BrAPI Institute"
    } ],
    "startDate" : "2000-01-23",
    "publications" : [ {
      "publicationPUI" : "doi:10.15454/312953986E3",
      "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
    }, {
      "publicationPUI" : "doi:10.15454/312953986E3",
      "publicationReference" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter trialDbId: (path) The internal trialDbId 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TrialSingleResponse> 
     */
    open class func trialsTrialDbIdPutWithRequestBuilder(trialDbId: String, body: TrialNewRequest? = nil, authorization: String? = nil) -> RequestBuilder<TrialSingleResponse> {
        var path = "/trials/{trialDbId}"
        let trialDbIdPreEscape = "\(trialDbId)"
        let trialDbIdPostEscape = trialDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trialDbId}", with: trialDbIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TrialSingleResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
