//
// TraitsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class TraitsAPI {
    /**
     Get the Traits

     - parameter traitDbId: (query) The unique identifier for a trait (optional)
     - parameter observationVariableDbId: (query) The unique identifier for an observation variable (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func traitsGet(traitDbId: String? = nil, observationVariableDbId: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil, completion: @escaping ((_ data: TraitListResponse?,_ error: Error?) -> Void)) {
        traitsGetWithRequestBuilder(traitDbId: traitDbId, observationVariableDbId: observationVariableDbId, externalReferenceID: externalReferenceID, externalReferenceSource: externalReferenceSource, page: page, pageSize: pageSize, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the Traits
     - GET /traits

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "traitName" : "Height",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "synonyms" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
      "traitDbId" : "9b2e34f5",
      "alternativeAbbreviations" : [ "H", "PH", "H1" ],
      "mainAbbreviation" : "PH",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "attribute" : "height",
      "ontologyReference" : {
        "ontologyDbId" : "6b071868",
        "ontologyName" : "The Crop Ontology",
        "documentationLinks" : [ {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        }, {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        } ],
        "version" : "7.2.3"
      },
      "traitDescription" : "The height of the plant",
      "entity" : "Stalk",
      "status" : "recommended",
      "traitClass" : "phenological"
    }, {
      "traitName" : "Height",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "synonyms" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
      "traitDbId" : "9b2e34f5",
      "alternativeAbbreviations" : [ "H", "PH", "H1" ],
      "mainAbbreviation" : "PH",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "attribute" : "height",
      "ontologyReference" : {
        "ontologyDbId" : "6b071868",
        "ontologyName" : "The Crop Ontology",
        "documentationLinks" : [ {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        }, {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        } ],
        "version" : "7.2.3"
      },
      "traitDescription" : "The height of the plant",
      "entity" : "Stalk",
      "status" : "recommended",
      "traitClass" : "phenological"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter traitDbId: (query) The unique identifier for a trait (optional)
     - parameter observationVariableDbId: (query) The unique identifier for an observation variable (optional)
     - parameter externalReferenceID: (query) An external reference ID. Could be a simple string or a URI. (use with &#x60;externalReferenceSource&#x60; parameter) (optional)
     - parameter externalReferenceSource: (query) An identifier for the source system or database of an external reference (use with &#x60;externalReferenceID&#x60; parameter) (optional)
     - parameter page: (query) Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is &#x27;page&#x27;&#x3D; 0). Default is &#x60;0&#x60;. (optional)
     - parameter pageSize: (query) The size of the pages to be returned. Default is &#x60;1000&#x60;. (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TraitListResponse> 
     */
    open class func traitsGetWithRequestBuilder(traitDbId: String? = nil, observationVariableDbId: String? = nil, externalReferenceID: String? = nil, externalReferenceSource: String? = nil, page: Int? = nil, pageSize: Int? = nil, authorization: String? = nil) -> RequestBuilder<TraitListResponse> {
        let path = "/traits"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "traitDbId": traitDbId, 
                        "observationVariableDbId": observationVariableDbId, 
                        "externalReferenceID": externalReferenceID, 
                        "externalReferenceSource": externalReferenceSource, 
                        "page": page?.encodeToJSON(), 
                        "pageSize": pageSize?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TraitListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Add new Traits

     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func traitsPost(body: [TraitNewRequest]? = nil, authorization: String? = nil, completion: @escaping ((_ data: TraitListResponse?,_ error: Error?) -> Void)) {
        traitsPostWithRequestBuilder(body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add new Traits
     - POST /traits

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "data" : [ {
      "traitName" : "Height",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "synonyms" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
      "traitDbId" : "9b2e34f5",
      "alternativeAbbreviations" : [ "H", "PH", "H1" ],
      "mainAbbreviation" : "PH",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "attribute" : "height",
      "ontologyReference" : {
        "ontologyDbId" : "6b071868",
        "ontologyName" : "The Crop Ontology",
        "documentationLinks" : [ {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        }, {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        } ],
        "version" : "7.2.3"
      },
      "traitDescription" : "The height of the plant",
      "entity" : "Stalk",
      "status" : "recommended",
      "traitClass" : "phenological"
    }, {
      "traitName" : "Height",
      "externalReferences" : [ {
        "referenceID" : "doi:10.155454/12341234",
        "referenceSource" : "DOI"
      }, {
        "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
        "referenceSource" : "OBO Library"
      }, {
        "referenceID" : "75a50e76",
        "referenceSource" : "Remote Data Collection Upload Tool"
      } ],
      "synonyms" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
      "traitDbId" : "9b2e34f5",
      "alternativeAbbreviations" : [ "H", "PH", "H1" ],
      "mainAbbreviation" : "PH",
      "additionalInfo" : {
        "key" : "additionalInfo"
      },
      "attribute" : "height",
      "ontologyReference" : {
        "ontologyDbId" : "6b071868",
        "ontologyName" : "The Crop Ontology",
        "documentationLinks" : [ {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        }, {
          "type" : "OBO",
          "URL" : "http://purl.obolibrary.org/obo/ro.owl"
        } ],
        "version" : "7.2.3"
      },
      "traitDescription" : "The height of the plant",
      "entity" : "Stalk",
      "status" : "recommended",
      "traitClass" : "phenological"
    } ]
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TraitListResponse> 
     */
    open class func traitsPostWithRequestBuilder(body: [TraitNewRequest]? = nil, authorization: String? = nil) -> RequestBuilder<TraitListResponse> {
        let path = "/traits"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TraitListResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
    /**
     Get the details of a specific Trait

     - parameter traitDbId: (path) Id of the trait to retrieve details of. 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func traitsTraitDbIdGet(traitDbId: String, authorization: String? = nil, completion: @escaping ((_ data: TraitSingleResponse?,_ error: Error?) -> Void)) {
        traitsTraitDbIdGetWithRequestBuilder(traitDbId: traitDbId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the details of a specific Trait
     - GET /traits/{traitDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "traitName" : "Height",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "synonyms" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
    "traitDbId" : "9b2e34f5",
    "alternativeAbbreviations" : [ "H", "PH", "H1" ],
    "mainAbbreviation" : "PH",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "attribute" : "height",
    "ontologyReference" : {
      "ontologyDbId" : "6b071868",
      "ontologyName" : "The Crop Ontology",
      "documentationLinks" : [ {
        "type" : "OBO",
        "URL" : "http://purl.obolibrary.org/obo/ro.owl"
      }, {
        "type" : "OBO",
        "URL" : "http://purl.obolibrary.org/obo/ro.owl"
      } ],
      "version" : "7.2.3"
    },
    "traitDescription" : "The height of the plant",
    "entity" : "Stalk",
    "status" : "recommended",
    "traitClass" : "phenological"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter traitDbId: (path) Id of the trait to retrieve details of. 
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TraitSingleResponse> 
     */
    open class func traitsTraitDbIdGetWithRequestBuilder(traitDbId: String, authorization: String? = nil) -> RequestBuilder<TraitSingleResponse> {
        var path = "/traits/{traitDbId}"
        let traitDbIdPreEscape = "\(traitDbId)"
        let traitDbIdPostEscape = traitDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{traitDbId}", with: traitDbIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TraitSingleResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }
    /**
     Update an existing Trait

     - parameter traitDbId: (path) Id of the trait to retrieve details of. 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func traitsTraitDbIdPut(traitDbId: String, body: TraitBaseClass? = nil, authorization: String? = nil, completion: @escaping ((_ data: TraitSingleResponse?,_ error: Error?) -> Void)) {
        traitsTraitDbIdPutWithRequestBuilder(traitDbId: traitDbId, body: body, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update an existing Trait
     - PUT /traits/{traitDbId}

     - :
       - type: http
       - name: AuthorizationToken
     - examples: [{contentType=application/json, example={
  "result" : {
    "traitName" : "Height",
    "externalReferences" : [ {
      "referenceID" : "doi:10.155454/12341234",
      "referenceSource" : "DOI"
    }, {
      "referenceID" : "http://purl.obolibrary.org/obo/ro.owl",
      "referenceSource" : "OBO Library"
    }, {
      "referenceID" : "75a50e76",
      "referenceSource" : "Remote Data Collection Upload Tool"
    } ],
    "synonyms" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
    "traitDbId" : "9b2e34f5",
    "alternativeAbbreviations" : [ "H", "PH", "H1" ],
    "mainAbbreviation" : "PH",
    "additionalInfo" : {
      "key" : "additionalInfo"
    },
    "attribute" : "height",
    "ontologyReference" : {
      "ontologyDbId" : "6b071868",
      "ontologyName" : "The Crop Ontology",
      "documentationLinks" : [ {
        "type" : "OBO",
        "URL" : "http://purl.obolibrary.org/obo/ro.owl"
      }, {
        "type" : "OBO",
        "URL" : "http://purl.obolibrary.org/obo/ro.owl"
      } ],
      "version" : "7.2.3"
    },
    "traitDescription" : "The height of the plant",
    "entity" : "Stalk",
    "status" : "recommended",
    "traitClass" : "phenological"
  },
  "metadata" : {
    "pagination" : {
      "totalPages" : 1,
      "pageSize" : 1000,
      "currentPage" : 0,
      "totalCount" : 10
    },
    "datafiles" : [ {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    }, {
      "fileDescription" : "This is an Excel data file",
      "fileName" : "datafile.xlsx",
      "fileSize" : 4398,
      "fileMD5Hash" : "c2365e900c81a89cf74d83dab60df146",
      "fileURL" : "https://wiki.brapi.org/examples/datafile.xlsx",
      "fileType" : "application/vnd.ms-excel"
    } ],
    "status" : [ {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    }, {
      "messageType" : "INFO",
      "message" : "Request accepted, response successful"
    } ]
  },
  "@context" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ]
}}]
     - parameter traitDbId: (path) Id of the trait to retrieve details of. 
     - parameter body: (body)  (optional)
     - parameter authorization: (header) HTTP HEADER - Token used for Authorization   &lt;strong&gt; Bearer {token_string} &lt;/strong&gt; (optional)

     - returns: RequestBuilder<TraitSingleResponse> 
     */
    open class func traitsTraitDbIdPutWithRequestBuilder(traitDbId: String, body: TraitBaseClass? = nil, authorization: String? = nil) -> RequestBuilder<TraitSingleResponse> {
        var path = "/traits/{traitDbId}"
        let traitDbIdPreEscape = "\(traitDbId)"
        let traitDbIdPostEscape = traitDbIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{traitDbId}", with: traitDbIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TraitSingleResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }
}
